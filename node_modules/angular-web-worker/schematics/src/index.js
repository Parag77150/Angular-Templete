"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const json_utils_1 = require("@schematics/angular/utility/json-utils");
const parse_name_1 = require("@schematics/angular/utility/parse-name");
const paths_1 = require("@schematics/angular/utility/paths");
const workspace_1 = require("@schematics/angular/utility/workspace");
// modified from '@schematics/angular/web-worker'
function addConfig(options, root) {
    return (tree, context) => {
        return schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./files/ts-config'), [
            schematics_1.applyTemplates(Object.assign({}, options, { relativePathToWorkspaceRoot: paths_1.relativePathToWorkspaceRoot(root) })),
            schematics_1.move(root),
        ]));
    };
}
exports.addConfig = addConfig;
function checkForTsConfigWorkerExclusion(tree, tsConfigPath) {
    const isInSrc = core_1.dirname(core_1.normalize(tsConfigPath)).endsWith('src');
    const workerGlob = `${isInSrc ? '' : 'src/'}**/*.worker.ts`;
    const buffer = tree.read(tsConfigPath);
    if (buffer) {
        const tsCfgAst = core_1.parseJsonAst(buffer.toString(), core_1.JsonParseMode.Loose);
        if (tsCfgAst.kind != 'object') {
            throw new schematics_1.SchematicsException('Invalid tsconfig. Was expecting an object');
        }
        const filesAstNode = json_utils_1.findPropertyInAstObject(tsCfgAst, 'exclude');
        if (filesAstNode && filesAstNode.kind != 'array') {
            throw new schematics_1.SchematicsException('Invalid tsconfig "exclude" property; expected an array.');
        }
        if (filesAstNode) {
            if (filesAstNode.value.includes(workerGlob)) {
                throw new schematics_1.SchematicsException(`Invalid tsconfig, cannot exclude ${workerGlob} in ${tsConfigPath}`);
            }
        }
    }
}
exports.checkForTsConfigWorkerExclusion = checkForTsConfigWorkerExclusion;
// code adapted from '@schematics/angular/web-worker'
function default_1(options) {
    return (tree) => __awaiter(this, void 0, void 0, function* () {
        const workspace = yield workspace_1.getWorkspace(tree);
        if (!options.project) {
            throw new schematics_1.SchematicsException('Option "project" is required.');
        }
        if (!options.target) {
            throw new schematics_1.SchematicsException('Option "target" is required.');
        }
        const project = workspace.projects.get(options.project);
        if (!project) {
            throw new schematics_1.SchematicsException(`Invalid project name (${options.project})`);
        }
        const projectType = project.extensions['projectType'];
        if (projectType !== 'application') {
            throw new schematics_1.SchematicsException(`Web Worker requires a project type of "application".`);
        }
        const projectTarget = project.targets.get(options.target);
        if (!projectTarget) {
            throw new Error(`Target is not defined for this project.`);
        }
        const projectTargetOptions = (projectTarget.options || {});
        if (options.path === undefined) {
            options.path = workspace_1.buildDefaultPath(project);
        }
        const parsedPath = parse_name_1.parseName(options.path, options.name);
        options.name = parsedPath.name;
        options.path = parsedPath.path;
        const root = project.root || '';
        const needWebWorkerConfig = !projectTargetOptions.webWorkerTsConfig;
        if (needWebWorkerConfig) {
            const workerConfigPath = core_1.join(core_1.normalize(root), 'tsconfig.worker.json');
            projectTargetOptions.webWorkerTsConfig = workerConfigPath;
            const lintTarget = project.targets.get('lint');
            if (lintTarget) {
                const lintOptions = (lintTarget.options || {});
                lintOptions.tsConfig = (lintOptions.tsConfig || []).concat(workerConfigPath);
            }
        }
        checkForTsConfigWorkerExclusion(tree, projectTargetOptions.tsConfig);
        const templateSource = schematics_1.apply(schematics_1.url('./files/worker'), [
            schematics_1.applyTemplates(Object.assign({}, options, core_1.strings)),
            schematics_1.move(parsedPath.path),
        ]);
        return schematics_1.chain([
            needWebWorkerConfig ? addConfig(options, root) : schematics_1.noop(),
            needWebWorkerConfig ? workspace_1.updateWorkspace(workspace) : schematics_1.noop(),
            schematics_1.mergeWith(templateSource)
        ]);
    });
}
exports.default = default_1;
