import { WorkerController } from 'angular-web-worker';
/**
 * Used to mock the behaviour of the native `Worker` class when a `WorkerClient` is set to run in the app and not in the worker script.
 * Controls the flow of messages to and from a `WorkerClient` and a `WorkerController`
 */
var ClientWebWorker = /** @class */ (function () {
    /**
     * Creates a new instance of a `ClientWebWorker`
     * @param workerType the worker class
     * @param isTestClient whether the instance is used for testing which will then mock serialization
     */
    function ClientWebWorker(workerType, isTestClient) {
        var _this = this;
        this.isTestClient = isTestClient;
        this.messageBus = {
            onmessage: function () { },
            postMessage: function (resp) {
                _this.onmessage(new MessageEvent('ClientWebWorker', { data: _this.isTestClient ? _this.serialize(resp) : resp }));
            }
        };
        this.controller = new WorkerController(workerType, this.messageBus);
    }
    Object.defineProperty(ClientWebWorker.prototype, "workerInstance", {
        /**
         * Returns instance of worker class
         */
        get: function () {
            return this.controller.workerInstance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Message listener for a `WorkerClient`
     */
    ClientWebWorker.prototype.onmessage = function (ev) {
    };
    /**
     * Sends messages triggered from a `WorkerClient` to a `WorkerController`
     */
    ClientWebWorker.prototype.postMessage = function (resp) {
        this.messageBus.onmessage(new MessageEvent('ClientWebWorker', { data: this.isTestClient ? this.serialize(resp) : resp }));
    };
    /**
     * Unsubscribes from all subscriptions in the `WorkerController` and then destroys the controller
     */
    ClientWebWorker.prototype.terminate = function () {
        this.controller.removeAllSubscriptions();
        this.controller = null;
    };
    /**
     * Used for testing to mock the serialization that occurs when native the postMessage or onmessage are used to communicate with a worker script
     * @param obj object to be serialised
     */
    ClientWebWorker.prototype.serialize = function (obj) {
        return JSON.parse(JSON.stringify(obj));
    };
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    ClientWebWorker.prototype.onerror = function (err) {
    };
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    ClientWebWorker.prototype.addEventListener = function () {
    };
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    ClientWebWorker.prototype.removeEventListener = function () {
    };
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    ClientWebWorker.prototype.dispatchEvent = function (evt) {
        return true;
    };
    return ClientWebWorker;
}());
export { ClientWebWorker };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LXdlYi13b3JrZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXdlYi13b3JrZXIvYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jbGllbnQtd2ViLXdvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUd0RDs7O0dBR0c7QUFDSDtJQWFJOzs7O09BSUc7SUFDSCx5QkFBWSxVQUE0QixFQUFVLFlBQXFCO1FBQXZFLGlCQVFDO1FBUmlELGlCQUFZLEdBQVosWUFBWSxDQUFTO1FBQ25FLElBQUksQ0FBQyxVQUFVLEdBQUc7WUFDZCxTQUFTLEVBQUUsY0FBUSxDQUFDO1lBQ3BCLFdBQVcsRUFBRSxVQUFDLElBQVM7Z0JBQ25CLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxZQUFZLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ25ILENBQUM7U0FDSixDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUtELHNCQUFJLDJDQUFjO1FBSGxCOztXQUVHO2FBQ0g7WUFDSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO1FBQzFDLENBQUM7OztPQUFBO0lBRUQ7O09BRUc7SUFDSCxtQ0FBUyxHQUFULFVBQVUsRUFBZ0I7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gscUNBQVcsR0FBWCxVQUFZLElBQVM7UUFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxZQUFZLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlILENBQUM7SUFFRDs7T0FFRztJQUNILG1DQUFTLEdBQVQ7UUFDSSxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNLLG1DQUFTLEdBQWpCLFVBQWtCLEdBQVE7UUFDdEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBR0Q7OztPQUdHO0lBQ0gsaUNBQU8sR0FBUCxVQUFRLEdBQVE7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILDBDQUFnQixHQUFoQjtJQUNBLENBQUM7SUFFRDs7O09BR0c7SUFDSCw2Q0FBbUIsR0FBbkI7SUFDQSxDQUFDO0lBR0Q7OztPQUdHO0lBQ0gsdUNBQWEsR0FBYixVQUFjLEdBQVU7UUFDcEIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUdMLHNCQUFDO0FBQUQsQ0FBQyxBQWhHRCxJQWdHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdvcmtlckNvbnRyb2xsZXIgfSBmcm9tICdhbmd1bGFyLXdlYi13b3JrZXInO1xyXG5pbXBvcnQgeyBXZWJXb3JrZXJUeXBlLCBXb3JrZXJNZXNzYWdlQnVzIH0gZnJvbSAnYW5ndWxhci13ZWItd29ya2VyL2NvbW1vbic7XHJcblxyXG4vKipcclxuICogVXNlZCB0byBtb2NrIHRoZSBiZWhhdmlvdXIgb2YgdGhlIG5hdGl2ZSBgV29ya2VyYCBjbGFzcyB3aGVuIGEgYFdvcmtlckNsaWVudGAgaXMgc2V0IHRvIHJ1biBpbiB0aGUgYXBwIGFuZCBub3QgaW4gdGhlIHdvcmtlciBzY3JpcHQuXHJcbiAqIENvbnRyb2xzIHRoZSBmbG93IG9mIG1lc3NhZ2VzIHRvIGFuZCBmcm9tIGEgYFdvcmtlckNsaWVudGAgYW5kIGEgYFdvcmtlckNvbnRyb2xsZXJgXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2xpZW50V2ViV29ya2VyPFQ+IGltcGxlbWVudHMgUGFydGlhbDxXb3JrZXI+IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgZXhlY3V0aW9uIG9mIGNvZGUgaW4gYSB3b3JrZXJcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjb250cm9sbGVyOiBXb3JrZXJDb250cm9sbGVyPFQ+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJmYWNlIGZvciBtZXNzYWdlIGJ1cyBwcm92aWRlZCBpbnRvIGEgYFdvcmtlckNvbnRyb2xsZXJgIGFsbG93aW5nIHRoZSBjb21tdW5pY2F0aW9uIG1lY2hhbmlzbSB0byBiZSBpbnRlcmNoYW5nZWQgYmV0d2VlbiBpbi1hcHAsIGFuZCBuYXRpdmUgd29ya2VyXHJcbiAgICAgKiBjb21tdW5pY2F0aW9uIG1lY2hhbnNpbXNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBtZXNzYWdlQnVzOiBXb3JrZXJNZXNzYWdlQnVzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGBDbGllbnRXZWJXb3JrZXJgXHJcbiAgICAgKiBAcGFyYW0gd29ya2VyVHlwZSB0aGUgd29ya2VyIGNsYXNzXHJcbiAgICAgKiBAcGFyYW0gaXNUZXN0Q2xpZW50IHdoZXRoZXIgdGhlIGluc3RhbmNlIGlzIHVzZWQgZm9yIHRlc3Rpbmcgd2hpY2ggd2lsbCB0aGVuIG1vY2sgc2VyaWFsaXphdGlvblxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih3b3JrZXJUeXBlOiBXZWJXb3JrZXJUeXBlPFQ+LCBwcml2YXRlIGlzVGVzdENsaWVudDogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUJ1cyA9IHtcclxuICAgICAgICAgICAgb25tZXNzYWdlOiAoKSA9PiB7IH0sXHJcbiAgICAgICAgICAgIHBvc3RNZXNzYWdlOiAocmVzcDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9ubWVzc2FnZShuZXcgTWVzc2FnZUV2ZW50KCdDbGllbnRXZWJXb3JrZXInLCB7IGRhdGE6IHRoaXMuaXNUZXN0Q2xpZW50ID8gdGhpcy5zZXJpYWxpemUocmVzcCkgOiByZXNwIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gbmV3IFdvcmtlckNvbnRyb2xsZXIod29ya2VyVHlwZSwgdGhpcy5tZXNzYWdlQnVzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgaW5zdGFuY2Ugb2Ygd29ya2VyIGNsYXNzXHJcbiAgICAgKi9cclxuICAgIGdldCB3b3JrZXJJbnN0YW5jZSgpOiBUIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLndvcmtlckluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWVzc2FnZSBsaXN0ZW5lciBmb3IgYSBgV29ya2VyQ2xpZW50YFxyXG4gICAgICovXHJcbiAgICBvbm1lc3NhZ2UoZXY6IE1lc3NhZ2VFdmVudCkge1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgbWVzc2FnZXMgdHJpZ2dlcmVkIGZyb20gYSBgV29ya2VyQ2xpZW50YCB0byBhIGBXb3JrZXJDb250cm9sbGVyYFxyXG4gICAgICovXHJcbiAgICBwb3N0TWVzc2FnZShyZXNwOiBhbnkpIHtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VCdXMub25tZXNzYWdlKG5ldyBNZXNzYWdlRXZlbnQoJ0NsaWVudFdlYldvcmtlcicsIHsgZGF0YTogdGhpcy5pc1Rlc3RDbGllbnQgPyB0aGlzLnNlcmlhbGl6ZShyZXNwKSA6IHJlc3AgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVW5zdWJzY3JpYmVzIGZyb20gYWxsIHN1YnNjcmlwdGlvbnMgaW4gdGhlIGBXb3JrZXJDb250cm9sbGVyYCBhbmQgdGhlbiBkZXN0cm95cyB0aGUgY29udHJvbGxlclxyXG4gICAgICovXHJcbiAgICB0ZXJtaW5hdGUoKSB7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLnJlbW92ZUFsbFN1YnNjcmlwdGlvbnMoKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCBmb3IgdGVzdGluZyB0byBtb2NrIHRoZSBzZXJpYWxpemF0aW9uIHRoYXQgb2NjdXJzIHdoZW4gbmF0aXZlIHRoZSBwb3N0TWVzc2FnZSBvciBvbm1lc3NhZ2UgYXJlIHVzZWQgdG8gY29tbXVuaWNhdGUgd2l0aCBhIHdvcmtlciBzY3JpcHRcclxuICAgICAqIEBwYXJhbSBvYmogb2JqZWN0IHRvIGJlIHNlcmlhbGlzZWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzZXJpYWxpemUob2JqOiBhbnkpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuc3VyZXMgY2xhc3MgY29uZm9ybXMgdG8gdGhlIG5hdGl2ZSBgV29ya2VyYCBjbGFzc1xyXG4gICAgICogQE5vdEltcGxlbWVudGVkXHJcbiAgICAgKi9cclxuICAgIG9uZXJyb3IoZXJyOiBhbnkpIHtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuc3VyZXMgY2xhc3MgY29uZm9ybXMgdG8gdGhlIG5hdGl2ZSBgV29ya2VyYCBjbGFzc1xyXG4gICAgICogQE5vdEltcGxlbWVudGVkXHJcbiAgICAgKi9cclxuICAgIGFkZEV2ZW50TGlzdGVuZXIoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbnN1cmVzIGNsYXNzIGNvbmZvcm1zIHRvIHRoZSBuYXRpdmUgYFdvcmtlcmAgY2xhc3NcclxuICAgICAqIEBOb3RJbXBsZW1lbnRlZFxyXG4gICAgICovXHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKCkge1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuc3VyZXMgY2xhc3MgY29uZm9ybXMgdG8gdGhlIG5hdGl2ZSBgV29ya2VyYCBjbGFzc1xyXG4gICAgICogQE5vdEltcGxlbWVudGVkXHJcbiAgICAgKi9cclxuICAgIGRpc3BhdGNoRXZlbnQoZXZ0OiBFdmVudCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuIl19