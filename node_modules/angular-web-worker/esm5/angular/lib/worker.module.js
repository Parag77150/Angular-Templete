import * as tslib_1 from "tslib";
import { WorkerManager } from './worker-manager';
import { NgModule } from '@angular/core';
import { WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';
/**
 * Provides the `WorkerManager` service with the worker definitions passed into the static `forWorkers` method.
 * @example
 * imports: [
 *  WorkerModule.forWorkers([
 *    {worker: AppWorker, initFn: () => new Worker('./app.worker.ts', {type: 'module'})},
 *  ])
 * ]
 */
var WorkerModule = /** @class */ (function () {
    function WorkerModule() {
    }
    WorkerModule_1 = WorkerModule;
    /**
     * Returns a module with a `WorkerManager` provider
     * @param workerDefinitions list of worker defintions which contain the worker class and an `initFn` function which is necessary for the
     * webpack `worker-plugin` to bundle the worker seperately.
     * @example
     * imports: [
     *  WorkerModule.forWorkers([
     *    {worker: AppWorker, initFn: () => new Worker('./app.worker.ts', {type: 'module'})},
     *  ])
     * ]
    */
    WorkerModule.forWorkers = function (workerDefinitions) {
        workerDefinitions.forEach(function (definition) {
            if (!WorkerUtils.getAnnotation(definition.worker, WorkerAnnotations.IsWorker)) {
                throw new Error('WorkerModule: one or more of the provided workers has not been decorated with the @AngularWebWorker decorator');
            }
        });
        return {
            ngModule: WorkerModule_1,
            providers: [
                { provide: WorkerManager, useValue: new WorkerManager(workerDefinitions) }
            ]
        };
    };
    var WorkerModule_1;
    WorkerModule = WorkerModule_1 = tslib_1.__decorate([
        NgModule()
    ], WorkerModule);
    return WorkerModule;
}());
export { WorkerModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItd2ViLXdvcmtlci9hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL3dvcmtlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUFpQixpQkFBaUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTFGOzs7Ozs7OztHQVFHO0FBRUg7SUFBQTtJQTZCQSxDQUFDO3FCQTdCWSxZQUFZO0lBRXJCOzs7Ozs7Ozs7O01BVUU7SUFDSyx1QkFBVSxHQUFqQixVQUFrQixpQkFBcUM7UUFFbkQsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFVBQUMsVUFBVTtZQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUMzRSxNQUFNLElBQUksS0FBSyxDQUFDLCtHQUErRyxDQUFDLENBQUM7YUFDcEk7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU87WUFDSCxRQUFRLEVBQUUsY0FBWTtZQUN0QixTQUFTLEVBQUU7Z0JBQ1AsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO2FBQzdFO1NBQ0osQ0FBQztJQUNOLENBQUM7O0lBM0JRLFlBQVk7UUFEeEIsUUFBUSxFQUFFO09BQ0UsWUFBWSxDQTZCeEI7SUFBRCxtQkFBQztDQUFBLEFBN0JELElBNkJDO1NBN0JZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgV29ya2VyTWFuYWdlciB9IGZyb20gJy4vd29ya2VyLW1hbmFnZXInO1xyXG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBXb3JrZXJVdGlscywgV2ViV29ya2VyVHlwZSwgV29ya2VyQW5ub3RhdGlvbnMgfSBmcm9tICdhbmd1bGFyLXdlYi13b3JrZXIvY29tbW9uJztcclxuXHJcbi8qKlxyXG4gKiBQcm92aWRlcyB0aGUgYFdvcmtlck1hbmFnZXJgIHNlcnZpY2Ugd2l0aCB0aGUgd29ya2VyIGRlZmluaXRpb25zIHBhc3NlZCBpbnRvIHRoZSBzdGF0aWMgYGZvcldvcmtlcnNgIG1ldGhvZC5cclxuICogQGV4YW1wbGVcclxuICogaW1wb3J0czogW1xyXG4gKiAgV29ya2VyTW9kdWxlLmZvcldvcmtlcnMoW1xyXG4gKiAgICB7d29ya2VyOiBBcHBXb3JrZXIsIGluaXRGbjogKCkgPT4gbmV3IFdvcmtlcignLi9hcHAud29ya2VyLnRzJywge3R5cGU6ICdtb2R1bGUnfSl9LFxyXG4gKiAgXSlcclxuICogXVxyXG4gKi9cclxuQE5nTW9kdWxlKClcclxuZXhwb3J0IGNsYXNzIFdvcmtlck1vZHVsZSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgbW9kdWxlIHdpdGggYSBgV29ya2VyTWFuYWdlcmAgcHJvdmlkZXJcclxuICAgICAqIEBwYXJhbSB3b3JrZXJEZWZpbml0aW9ucyBsaXN0IG9mIHdvcmtlciBkZWZpbnRpb25zIHdoaWNoIGNvbnRhaW4gdGhlIHdvcmtlciBjbGFzcyBhbmQgYW4gYGluaXRGbmAgZnVuY3Rpb24gd2hpY2ggaXMgbmVjZXNzYXJ5IGZvciB0aGVcclxuICAgICAqIHdlYnBhY2sgYHdvcmtlci1wbHVnaW5gIHRvIGJ1bmRsZSB0aGUgd29ya2VyIHNlcGVyYXRlbHkuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogaW1wb3J0czogW1xyXG4gICAgICogIFdvcmtlck1vZHVsZS5mb3JXb3JrZXJzKFtcclxuICAgICAqICAgIHt3b3JrZXI6IEFwcFdvcmtlciwgaW5pdEZuOiAoKSA9PiBuZXcgV29ya2VyKCcuL2FwcC53b3JrZXIudHMnLCB7dHlwZTogJ21vZHVsZSd9KX0sXHJcbiAgICAgKiAgXSlcclxuICAgICAqIF1cclxuICAgICovXHJcbiAgICBzdGF0aWMgZm9yV29ya2Vycyh3b3JrZXJEZWZpbml0aW9uczogV29ya2VyRGVmaW5pdGlvbltdKTogTW9kdWxlV2l0aFByb3ZpZGVyczxhbnk+IHtcclxuXHJcbiAgICAgICAgd29ya2VyRGVmaW5pdGlvbnMuZm9yRWFjaCgoZGVmaW5pdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIVdvcmtlclV0aWxzLmdldEFubm90YXRpb24oZGVmaW5pdGlvbi53b3JrZXIsIFdvcmtlckFubm90YXRpb25zLklzV29ya2VyKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3JrZXJNb2R1bGU6IG9uZSBvciBtb3JlIG9mIHRoZSBwcm92aWRlZCB3b3JrZXJzIGhhcyBub3QgYmVlbiBkZWNvcmF0ZWQgd2l0aCB0aGUgQEFuZ3VsYXJXZWJXb3JrZXIgZGVjb3JhdG9yJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmdNb2R1bGU6IFdvcmtlck1vZHVsZSxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IFdvcmtlck1hbmFnZXIsIHVzZVZhbHVlOiBuZXcgV29ya2VyTWFuYWdlcih3b3JrZXJEZWZpbml0aW9ucykgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGRlZmluaXRpb24gb2YgYSB3b3JrZXIgdGhhdCBpcyByZXF1aXJlZCB0byBjcmVhdGUgbmV3IHdvcmtlciBpbnN0YW5jZXNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgV29ya2VyRGVmaW5pdGlvbiB7XHJcbiAgICAvKipcclxuICAgICAqIHRoZSB3b3JrZXIgY2xhc3Mgd2hpY2ggaGFzIGJlZW4gZGVjb3JhdGVkIHdpdGggYEBBbmd1bGFyV2ViV29ya2VyKClgXHJcbiAgICAgKi9cclxuICAgIHdvcmtlcjogV2ViV29ya2VyVHlwZTxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIHdvcmtlci4gVGhpcyBpcyByZXF1aXJlZCBmb3IgdGhlIHdlYnBhY2sgYHdvcmtlci1wbHVnaW5gIHRvIGJ1bmRsZSB0aGUgd29ya2VyIHNlcGVyYXRlbHkgYW5kIGlzIHVzZWQgYnkgYSBgV29ya2VyQ2xpZW50YFxyXG4gICAgICogdG8gY3JlYXRlIGEgbmV3IHdvcmtlclxyXG4gICAgICpcclxuICAgICAqICoqSU1QT1JUQU5UKipcclxuICAgICAqXHJcbiAgICAgKiBUaGUgc3ludGF4IGlzIGNydWNpYWwgZm9yIHRoZSB3ZWJwYWNrIHBsdWdpbi4gVGhlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBhbmQgdGhlIHt0eXBlOiAnbW9kdWxlJ30gYXJndW1lbnQgbXVzdCBiZSBnaXZlblxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqICgpID0+IG5ldyBXb3JrZXIoJy4vYXBwLndvcmtlci50cycsIHt0eXBlOiAnbW9kdWxlJ30pXHJcbiAgICAgKi9cclxuICAgIGluaXRGbjogKCkgPT4gV29ya2VyO1xyXG59XHJcbiJdfQ==