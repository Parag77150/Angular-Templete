/**
 * Worker annotation constants for decorators
 */
export var WorkerAnnotations;
(function (WorkerAnnotations) {
    WorkerAnnotations["Annotation"] = "__worker_annotations__";
    WorkerAnnotations["Config"] = "__worker_config__";
    WorkerAnnotations["Callables"] = "callables";
    WorkerAnnotations["Observables"] = "observables";
    WorkerAnnotations["Accessables"] = "accessables";
    WorkerAnnotations["ShallowTransferArgs"] = "shallowTransferArgs";
    WorkerAnnotations["IsWorker"] = "isWorker";
    WorkerAnnotations["Factory"] = "workerFactory";
})(WorkerAnnotations || (WorkerAnnotations = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ub3RhdGlvbnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXdlYi13b3JrZXIvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2Fubm90YXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksaUJBU1g7QUFURCxXQUFZLGlCQUFpQjtJQUN6QiwwREFBcUMsQ0FBQTtJQUNyQyxpREFBNEIsQ0FBQTtJQUM1Qiw0Q0FBdUIsQ0FBQTtJQUN2QixnREFBMkIsQ0FBQTtJQUMzQixnREFBMkIsQ0FBQTtJQUMzQixnRUFBMkMsQ0FBQTtJQUMzQywwQ0FBcUIsQ0FBQTtJQUNyQiw4Q0FBeUIsQ0FBQTtBQUM3QixDQUFDLEVBVFcsaUJBQWlCLEtBQWpCLGlCQUFpQixRQVM1QiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKipcclxuICogV29ya2VyIGFubm90YXRpb24gY29uc3RhbnRzIGZvciBkZWNvcmF0b3JzXHJcbiAqL1xyXG5leHBvcnQgZW51bSBXb3JrZXJBbm5vdGF0aW9ucyB7XHJcbiAgICBBbm5vdGF0aW9uID0gJ19fd29ya2VyX2Fubm90YXRpb25zX18nLFxyXG4gICAgQ29uZmlnID0gJ19fd29ya2VyX2NvbmZpZ19fJyxcclxuICAgIENhbGxhYmxlcyA9ICdjYWxsYWJsZXMnLFxyXG4gICAgT2JzZXJ2YWJsZXMgPSAnb2JzZXJ2YWJsZXMnLFxyXG4gICAgQWNjZXNzYWJsZXMgPSAnYWNjZXNzYWJsZXMnLFxyXG4gICAgU2hhbGxvd1RyYW5zZmVyQXJncyA9ICdzaGFsbG93VHJhbnNmZXJBcmdzJyxcclxuICAgIElzV29ya2VyID0gJ2lzV29ya2VyJyxcclxuICAgIEZhY3RvcnkgPSAnd29ya2VyRmFjdG9yeSdcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBhdHRhY2hlZCB0byBhIHdvcmtlciBpbnN0YW5jZSBkZXNjcmliaW5nIGlmIHRoZSBpbnN0YW5jZSBpcyBhIGNsaWVudCBvciBub3RcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgV29ya2VyQ29uZmlnIHtcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB3b3JrZXIgaXMgY2xpZW50IGluc3RhbmNlIG9yIG5vdCwgZGV0ZXJtaW5lZCBieSB3aGV0aGVyIGl0IGlzIGNyZWF0ZWQgZnJvbSBhIGBXb3JrZXJDbGllbnRgIG9yIHRoZSBgYm9vdHN0cmFwV29ya2VyKClgIGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIGlzQ2xpZW50OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHNlY3JldCB0aGF0IGlzIGF0dGFjaGVkIHRvIHRoZSBjbGllbnQgaW5zdGFuY2Ugb2YgYSB3b3JrZXIgd2hpY2ggbXVzdCBiZSByZXR1cm5lZCB3aGVuIGEgYFdvcmtlckNsaWVudGAgY2FsbHMgYW55IG1ldGhvZHMvcHJvcGVydGllcyBvZiB0aGUgd29ya2VyXHJcbiAgICAgKi9cclxuICAgIGNsaWVudFNlY3JldD86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIE1ldGFkYXRhIGF0dGFjaGVkIHRvIGEgd29ya2VyJ3MgcHJvdG90eXBlIGZvciBhbnkgcHJvcGVydGllcyBkZWNvcmF0ZWQgd2l0aCBgQEFjY2Vzc2FibGUoKWAuIENvbnRhaW5zIGRldGFpbHMgdGhhdCBkZXNjcmliZXMgaG93IGEgYFdvcmtlckNsaWVudGAgY2FuIGFjY2VzcyB0aGUgcHJvcGVydHlcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzYWJsZU1ldGFEYXRhIHtcclxuICAgIC8qKlxyXG4gICAgICogTmFtZSBvZiB0aGUgZGVjb3JhdGVkIHByb3BlcnR5XHJcbiAgICAgKi9cclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogUHJvdG90eXBlIG9mIHRoZSBkZWNvcmF0ZWQgcHJvcGVydHkncyBkZXNpZ24gdHlwZSB0aGF0IGlzIG9idGFpbmVkIHVzaW5nIHJlZmxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgdHlwZTogRnVuY3Rpb247XHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZGVjb3JhdGVkIHdvcmtlciBwcm9wZXJ0eSBjYW4gYmUgcmV0cmlldmVkIGJ5IGEgYFdvcmtlckNsaWVudGAuIFNldCBhcyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgaW4gdGhlIGBAQWNjZXNzYWJsZSgpYCBkZWNvcmF0b3JcclxuICAgICAqIEBkZWZhdWx0dmFsdWUgdHJ1ZVxyXG4gICAgICovXHJcbiAgICBnZXQ6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZGVjb3JhdGVkIHdvcmtlciBwcm9wZXJ0eSBjYW4gYmUgc2V0IGZyb20gYSBgV29ya2VyQ2xpZW50YC4gU2V0IGFzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciBpbiB0aGUgYEBBY2Nlc3NhYmxlKClgIGRlY29yYXRvclxyXG4gICAgICogQGRlZmF1bHR2YWx1ZSB0cnVlXHJcbiAgICAgKi9cclxuICAgIHNldDogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGUgZGVjb3JhdG9yZWQgcHJvcGVydHkncyBwcm90b3R5cGUgaXMgdHJhbnNmZXJlZCBhZnRlciBpdCBoYXMgYmVlbiBzZXJpYWxpemVkIGFuZCB1bnNlcmlhbGl6ZWQgZHVyaW5nIGNvbW11bmljYXRpb24gYmV0d2VlbiBhIHdvcmtlciBhbmQgYSBjbGllbnQuIFNldCBhcyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgaW4gdGhlIGBAQWNjZXNzYWJsZSgpYCBkZWNvcmF0b3JcclxuICAgICAqIEBkZWZhdWx0dmFsdWUgZmFsc2VcclxuICAgICAqIEBFeHBlcmltZW50YWwgaGFzIGxpbWl0YXRpb25zXHJcbiAgICAgKi9cclxuICAgIHNoYWxsb3dUcmFuc2ZlcjogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1ldGFkYXRhIGF0dGFjaGVkIHRvIGEgd29ya2VyJ3MgcHJvdG90eXBlIGZvciBhbnkgbWV0aG9kcyBkZWNvcmF0ZWQgd2l0aCBgQENhbGxhYmxlKClgLiBDb250YWlucyBkZXRhaWxzIHRoYXQgYWxsb3dzIHRoZSBtZXRob2QgdG8gYmUgY2FsbGVkIGZyb20gYSBgV29ya2VyQ2xpZW50YFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDYWxsYWJsZU1ldGFEYXRhIHtcclxuICAgIC8qKlxyXG4gICAgICogTmFtZSBvZiB0aGUgZGVjb3JhdGVkIHByb3BlcnR5XHJcbiAgICAgKi9cclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogUHJvdG90eXBlIG9mIHRoZSBkZWNvcmF0ZWQgbWV0aG9kJ3MgcmV0dXJuIHR5cGUgdGhhdCBpcyBvYnRhaW5lZCB1c2luZyByZWZsZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIHJldHVyblR5cGU6IEZ1bmN0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoZSByZXR1cm5lZCB2YWx1ZSdzIHByb3RvdHlwZSBpcyB0cmFuc2ZlcmVkIGFmdGVyIGl0IGhhcyBiZWVuIHNlcmlhbGl6ZWQgYW5kIHVuc2VyaWFsaXplZCB3aGVuIGl0IGlzIGJyb3VnaHQgYmFjayB0byBhIGNsaWVudC4gU2V0IGFzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciBpbiB0aGUgYEBDYWxsYWJsZSgpYCBkZWNvcmF0b3JcclxuICAgICAqIEBkZWZhdWx0dmFsdWUgZmFsc2VcclxuICAgICAqIEBFeHBlcmltZW50YWwgaGFzIGxpbWl0YXRpb25zIChjYW5ub3QgYmUgdXNlZCB3aXRoIGFzeW5jIGZ1bmN0aW9ucylcclxuICAgICAqL1xyXG4gICAgc2hhbGxvd1RyYW5zZmVyOiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogTWV0YWRhdGEgYXR0YWNoZWQgdG8gYSB3b3JrZXIncyBwcm90b3R5cGUgZm9yIGFueSBSeEpTIFN1YmplY3QgcHJvcGVydGllcyB0aGF0IGFyZSBkZWNvcmF0ZWQgd2l0aCBgQFN1YnNjcmliYWJsZSgpYC4gQWxsb3dzIGEgYFdvcmtlckNsaWVudGAgdG9cclxuICogIHN1YnNjcmliZSB0byBhbmQvb3IgY3JlYXRlIG9ic2VydmFibGVzIGZyb20gdGhlIHN1YmplY3Qgd2l0aGluIHRoZSB3b3JrZXJcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaWJhYmxlTWV0YURhdGEge1xyXG4gICAgLyoqXHJcbiAgICAgKiBOYW1lIG9mIHRoZSBkZWNvcmF0ZWQgcHJvcGVydHlcclxuICAgICAqL1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcm90b3R5cGUgb2YgdGhlIGRlY29yYXRlZCBwcm9wZXJ0eSdzIGRlc2lnbiB0eXBlXHJcbiAgICAgKi9cclxuICAgIHR5cGU6IEZ1bmN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogTWV0YWRhdGEgYXR0YWNoZWQgdG8gYSB3b3JrZXIncyBwcm90b3R5cGUgZm9yIG1ldGhvZCBhcmd1bWVudHMgdGhhdCBhcmUgZGVjb3JhdGVkIHdpdGggYEBTaGFsbG93VHJhbnNmZXIoKWAuXHJcbiAqIENvbnRhaW5zIGRldGFpbHMgdGhhdCBhbGxvd3MgdGhlIGFyZ3VtZW50J3MgcHJvdG90eXBlIHRvIGJlIHRyYW5zZmVyZWQgYWZ0ZXIgaXQgaGFzIGJlZW4gc2VyaWFsaXplZCBhbmQgdW5zZXJpYWxpemVkIHdoZW4gc2VudCBmcm9tIGEgY2xpZW50IHRvIGJlIHBhc3NlZCBhcyBhbiBhcmd1bWVudCBvZiBhIHdvcmtlciBmdW5jdGlvbi5cclxuICogQEV4cGVyaW1lbnRhbCBoYXMgbGltaXRhdGlvbnNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2hhbGxvd1RyYW5zZmVyUGFyYW1NZXRhRGF0YSB7XHJcbiAgICAvKipcclxuICAgICAqIE5hbWUgb2YgdGhlIGRlY29yYXRlZCBwcm9wZXJ0eVxyXG4gICAgICovXHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFByb3RvdHlwZSBvZiB0aGUgZGVjb3JhdGVkIGFyZ3VtZW50J3MgZGVzaWduIHR5cGVcclxuICAgICAqL1xyXG4gICAgdHlwZTogRnVuY3Rpb247XHJcbiAgICAvKipcclxuICAgICAqIEluZGV4IG9mIHRoZSBhcmd1bWVudCBpbiB0aGUgZnVuY3Rpb25zIGNhbGwgc2lnbml0dXJlXHJcbiAgICAgKi9cclxuICAgIGFyZ0luZGV4OiBudW1iZXI7XHJcbn1cclxuXHJcblxyXG4iXX0=