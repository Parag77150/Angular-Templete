import { WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';
/**
 * Transfers the decorated argument's prototype when it is serialized and unserialized when the method is called from `WorkerClient.call()`. This will only have an effect if
 * the method is decorated with `@Callable()`
 * @Experimental has limitations
 */
export function ShallowTransfer() {
    return function (target, propertyKey, parameterIndex) {
        var argTypes = Reflect.getMetadata('design:paramtypes', target, propertyKey);
        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.ShallowTransferArgs, {
            name: propertyKey,
            type: argTypes[parameterIndex],
            argIndex: parameterIndex
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhbGxvdy10cmFuc2Zlci1kZWNvcmF0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXdlYi13b3JrZXIvIiwic291cmNlcyI6WyJsaWIvc2hhbGxvdy10cmFuc2Zlci1kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBZ0MsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV6Rzs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGVBQWU7SUFDM0IsT0FBTyxVQUFVLE1BQWMsRUFBRSxXQUE0QixFQUFFLGNBQXNCO1FBQ2pGLElBQU0sUUFBUSxHQUFVLE9BQU8sQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3RGLFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBZ0M7WUFDaEgsSUFBSSxFQUFFLFdBQVc7WUFDakIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUM7WUFDOUIsUUFBUSxFQUFFLGNBQWM7U0FDM0IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdvcmtlclV0aWxzLCBTaGFsbG93VHJhbnNmZXJQYXJhbU1ldGFEYXRhLCBXb3JrZXJBbm5vdGF0aW9ucyB9IGZyb20gJ2FuZ3VsYXItd2ViLXdvcmtlci9jb21tb24nO1xyXG5cclxuLyoqXHJcbiAqIFRyYW5zZmVycyB0aGUgZGVjb3JhdGVkIGFyZ3VtZW50J3MgcHJvdG90eXBlIHdoZW4gaXQgaXMgc2VyaWFsaXplZCBhbmQgdW5zZXJpYWxpemVkIHdoZW4gdGhlIG1ldGhvZCBpcyBjYWxsZWQgZnJvbSBgV29ya2VyQ2xpZW50LmNhbGwoKWAuIFRoaXMgd2lsbCBvbmx5IGhhdmUgYW4gZWZmZWN0IGlmXHJcbiAqIHRoZSBtZXRob2QgaXMgZGVjb3JhdGVkIHdpdGggYEBDYWxsYWJsZSgpYFxyXG4gKiBARXhwZXJpbWVudGFsIGhhcyBsaW1pdGF0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFNoYWxsb3dUcmFuc2ZlcigpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBPYmplY3QsIHByb3BlcnR5S2V5OiBzdHJpbmcgfCBzeW1ib2wsIHBhcmFtZXRlckluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBhcmdUeXBlczogYW55W10gPSBSZWZsZWN0LmdldE1ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIHRhcmdldCwgcHJvcGVydHlLZXkpO1xyXG4gICAgICAgIFdvcmtlclV0aWxzLnB1c2hBbm5vdGF0aW9uKHRhcmdldC5jb25zdHJ1Y3RvciwgV29ya2VyQW5ub3RhdGlvbnMuU2hhbGxvd1RyYW5zZmVyQXJncywgPFNoYWxsb3dUcmFuc2ZlclBhcmFtTWV0YURhdGE+e1xyXG4gICAgICAgICAgICBuYW1lOiBwcm9wZXJ0eUtleSxcclxuICAgICAgICAgICAgdHlwZTogYXJnVHlwZXNbcGFyYW1ldGVySW5kZXhdLFxyXG4gICAgICAgICAgICBhcmdJbmRleDogcGFyYW1ldGVySW5kZXhcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuIl19