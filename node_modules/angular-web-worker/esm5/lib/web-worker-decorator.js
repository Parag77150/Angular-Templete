import { WorkerUtils, WorkerAnnotations, WorkerEvents } from 'angular-web-worker/common';
var ɵ0 = function (instance, config) {
    Object.defineProperty(instance, WorkerAnnotations.Config, {
        get: function () {
            return config;
        },
        enumerable: true,
        configurable: true
    });
}, ɵ1 = function (instance) {
    var accessables = WorkerUtils.getAnnotation(instance.__proto__.constructor, WorkerAnnotations.Accessables, []);
    if (accessables) {
        accessables.forEach(function (item) {
            var _val = instance[item.name];
            var getter = function () {
                var config = this.__worker_config__;
                if (config) {
                    if (config.isClient) {
                        var secret = {
                            clientSecret: config.clientSecret,
                            type: WorkerEvents.Accessable,
                            propertyName: item.name,
                            body: {
                                get: item.get,
                                set: item.set
                            }
                        };
                        return secret;
                    }
                    else {
                        return _val;
                    }
                }
                else {
                    return _val;
                }
            };
            var setter = function (newVal) {
                _val = newVal;
            };
            delete instance[item.name];
            Object.defineProperty(instance, item.name, {
                get: getter,
                set: setter,
                enumerable: true,
                configurable: true
            });
        });
    }
}, ɵ2 = function (instance) {
    var observables = WorkerUtils.getAnnotation(instance.__proto__.constructor, WorkerAnnotations.Observables, []);
    if (observables) {
        observables.forEach(function (item) {
            var _val = instance[item.name];
            var getter = function () {
                var config = this.__worker_config__;
                if (config) {
                    if (config.isClient) {
                        var secret = {
                            clientSecret: config.clientSecret,
                            type: WorkerEvents.Observable,
                            propertyName: item.name,
                            body: null
                        };
                        return secret;
                    }
                    else {
                        return _val;
                    }
                }
                else {
                    return _val;
                }
            };
            var setter = function (newVal) {
                _val = newVal;
            };
            delete instance[item.name];
            Object.defineProperty(instance, item.name, {
                get: getter,
                set: setter,
                enumerable: true,
                configurable: true
            });
        });
    }
};
export var WorkerFactoryFunctions = {
    /*
     * Attaches a worker configuration to an instance of a worker class
     * @param instance instance of the worker class
     * @param config configuration
     */
    setWorkerConfig: ɵ0,
    configureAccessables: ɵ1,
    configureSubscribables: ɵ2
};
/**
 * Class decorator allowing the class to be bootstrapped into a web worker script, and allowing communication with a `WorkerClient`
 */
export function AngularWebWorker() {
    return function (target) {
        WorkerUtils.setAnnotation(target, WorkerAnnotations.IsWorker, true);
        WorkerUtils.setAnnotation(target, WorkerAnnotations.Factory, function create(config) {
            var instance = new target();
            WorkerFactoryFunctions.setWorkerConfig(instance, config);
            WorkerFactoryFunctions.configureAccessables(instance);
            WorkerFactoryFunctions.configureSubscribables(instance);
            return instance;
        });
    };
}
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,