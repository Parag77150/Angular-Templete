import { WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';
import 'reflect-metadata';
/**
 * Allows the decorated worker property to be subscribed to, or observed through the `WorkerClient.subscribe()` and `WorkerClient.observe()` methods.
 *
 * Can only be used on multicasted RxJS observables being a `Subject`,  `BehaviorSubject`, `ReplaySubject` or `AsyncSubject`.
 * @Serialized When data is transferred through `Subject.next()`, functions will not be copied and circular referencing structures will cause errors
 */
export function Subscribable() {
    return function (target, propertyKey) {
        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.Observables, {
            name: propertyKey,
            type: Reflect.getMetadata('design:type', target, propertyKey)
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vic2NyaWJhYmxlLWRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItd2ViLXdvcmtlci8iLCJzb3VyY2VzIjpbImxpYi9zdWJzY3JpYmFibGUtZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQXlDLGlCQUFpQixFQUE0QyxNQUFNLDJCQUEyQixDQUFDO0FBQzVKLE9BQU8sa0JBQWtCLENBQUM7QUFFMUI7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsWUFBWTtJQUN4QixPQUFPLFVBQW9ELE1BQVMsRUFBRSxXQUFpQjtRQUNuRixXQUFXLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLENBQUMsV0FBVyxFQUF3QjtZQUNoRyxJQUFJLEVBQUUsV0FBVztZQUNqQixJQUFJLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFVLFdBQVcsQ0FBQztTQUN4RSxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV29ya2VyVXRpbHMsIE9ic2VydmFibGVzT25seSwgU3Vic2NyaWJhYmxlTWV0YURhdGEsIFdvcmtlckFubm90YXRpb25zLCBXb3JrZXJDb25maWcsIFNlY3JldFJlc3VsdCwgV29ya2VyRXZlbnRzIH0gZnJvbSAnYW5ndWxhci13ZWItd29ya2VyL2NvbW1vbic7XHJcbmltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XHJcblxyXG4vKipcclxuICogQWxsb3dzIHRoZSBkZWNvcmF0ZWQgd29ya2VyIHByb3BlcnR5IHRvIGJlIHN1YnNjcmliZWQgdG8sIG9yIG9ic2VydmVkIHRocm91Z2ggdGhlIGBXb3JrZXJDbGllbnQuc3Vic2NyaWJlKClgIGFuZCBgV29ya2VyQ2xpZW50Lm9ic2VydmUoKWAgbWV0aG9kcy5cclxuICpcclxuICogQ2FuIG9ubHkgYmUgdXNlZCBvbiBtdWx0aWNhc3RlZCBSeEpTIG9ic2VydmFibGVzIGJlaW5nIGEgYFN1YmplY3RgLCAgYEJlaGF2aW9yU3ViamVjdGAsIGBSZXBsYXlTdWJqZWN0YCBvciBgQXN5bmNTdWJqZWN0YC5cclxuICogQFNlcmlhbGl6ZWQgV2hlbiBkYXRhIGlzIHRyYW5zZmVycmVkIHRocm91Z2ggYFN1YmplY3QubmV4dCgpYCwgZnVuY3Rpb25zIHdpbGwgbm90IGJlIGNvcGllZCBhbmQgY2lyY3VsYXIgcmVmZXJlbmNpbmcgc3RydWN0dXJlcyB3aWxsIGNhdXNlIGVycm9yc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFN1YnNjcmliYWJsZSgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiA8VCwgVGtleSBleHRlbmRzIGtleW9mIE9ic2VydmFibGVzT25seTxUPj4odGFyZ2V0OiBULCBwcm9wZXJ0eUtleTogVGtleSkge1xyXG4gICAgICAgIFdvcmtlclV0aWxzLnB1c2hBbm5vdGF0aW9uKHRhcmdldC5jb25zdHJ1Y3RvciwgV29ya2VyQW5ub3RhdGlvbnMuT2JzZXJ2YWJsZXMsIDxTdWJzY3JpYmFibGVNZXRhRGF0YT57XHJcbiAgICAgICAgICAgIG5hbWU6IHByb3BlcnR5S2V5LFxyXG4gICAgICAgICAgICB0eXBlOiBSZWZsZWN0LmdldE1ldGFkYXRhKCdkZXNpZ246dHlwZScsIHRhcmdldCwgPHN0cmluZz5wcm9wZXJ0eUtleSlcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuIl19