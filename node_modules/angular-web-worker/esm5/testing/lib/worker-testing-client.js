import * as tslib_1 from "tslib";
import { WorkerClient } from 'angular-web-worker/angular';
import { WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';
/**
 * **Used for Testing**
 *
 * Testing implementation a `WorkerClient`, which does not run in a worker script but mocks the serialization that occurs when messages are transfered to
 * and from a worker. Also adds a public `workerInstance` to test and spy on the worker class
 *
 */
var WorkerTestingClient = /** @class */ (function (_super) {
    tslib_1.__extends(WorkerTestingClient, _super);
    function WorkerTestingClient(definition) {
        return _super.call(this, definition, true, true) || this;
    }
    Object.defineProperty(WorkerTestingClient.prototype, "workerInstance", {
        /**
         * Exposed instance of the private worker instance to allow testing & spying
         */
        get: function () {
            if (this.isConnected) {
                return this['workerRef'].workerInstance;
            }
            else {
                throw new Error('Cannot access worker instance until the connect method has been called');
            }
        },
        enumerable: true,
        configurable: true
    });
    return WorkerTestingClient;
}(WorkerClient));
export { WorkerTestingClient };
/**
 * Creates a new `TestWorkerClient`
 * @param workerClass worker class
 */
export function createTestClient(workerClass) {
    if (!WorkerUtils.getAnnotation(workerClass, WorkerAnnotations.IsWorker)) {
        throw new Error('createTestClient: the provided class must be decorated with @AngularWebWorker()');
    }
    else {
        return new WorkerTestingClient({ worker: workerClass, initFn: function () { return null; } });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLXRlc3RpbmctY2xpZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci13ZWItd29ya2VyL3Rlc3RpbmcvIiwic291cmNlcyI6WyJsaWIvd29ya2VyLXRlc3RpbmctY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFxQyxNQUFNLDRCQUE0QixDQUFDO0FBQzdGLE9BQU8sRUFBaUIsV0FBVyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFMUY7Ozs7OztHQU1HO0FBQ0g7SUFBNEMsK0NBQWU7SUFFdkQsNkJBQVksVUFBNEI7ZUFDcEMsa0JBQU0sVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFDakMsQ0FBQztJQUtELHNCQUFJLCtDQUFjO1FBSGxCOztXQUVHO2FBQ0g7WUFDSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2xCLE9BQVEsSUFBSSxDQUFDLFdBQVcsQ0FBd0IsQ0FBQyxjQUFjLENBQUM7YUFDbkU7aUJBQU07Z0JBQ0gsTUFBTSxJQUFJLEtBQUssQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDO2FBQzdGO1FBQ0wsQ0FBQzs7O09BQUE7SUFDTCwwQkFBQztBQUFELENBQUMsQUFoQkQsQ0FBNEMsWUFBWSxHQWdCdkQ7O0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUFJLFdBQTZCO0lBQzdELElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNyRSxNQUFNLElBQUksS0FBSyxDQUFDLGlGQUFpRixDQUFDLENBQUM7S0FDdEc7U0FBTTtRQUNILE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLGNBQU0sT0FBQSxJQUFJLEVBQUosQ0FBSSxFQUFFLENBQUMsQ0FBQztLQUMvRTtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXb3JrZXJDbGllbnQsIFdvcmtlckRlZmluaXRpb24sIENsaWVudFdlYldvcmtlciB9IGZyb20gJ2FuZ3VsYXItd2ViLXdvcmtlci9hbmd1bGFyJztcclxuaW1wb3J0IHsgV2ViV29ya2VyVHlwZSwgV29ya2VyVXRpbHMsIFdvcmtlckFubm90YXRpb25zIH0gZnJvbSAnYW5ndWxhci13ZWItd29ya2VyL2NvbW1vbic7XHJcblxyXG4vKipcclxuICogKipVc2VkIGZvciBUZXN0aW5nKipcclxuICpcclxuICogVGVzdGluZyBpbXBsZW1lbnRhdGlvbiBhIGBXb3JrZXJDbGllbnRgLCB3aGljaCBkb2VzIG5vdCBydW4gaW4gYSB3b3JrZXIgc2NyaXB0IGJ1dCBtb2NrcyB0aGUgc2VyaWFsaXphdGlvbiB0aGF0IG9jY3VycyB3aGVuIG1lc3NhZ2VzIGFyZSB0cmFuc2ZlcmVkIHRvXHJcbiAqIGFuZCBmcm9tIGEgd29ya2VyLiBBbHNvIGFkZHMgYSBwdWJsaWMgYHdvcmtlckluc3RhbmNlYCB0byB0ZXN0IGFuZCBzcHkgb24gdGhlIHdvcmtlciBjbGFzc1xyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFdvcmtlclRlc3RpbmdDbGllbnQ8VD4gZXh0ZW5kcyBXb3JrZXJDbGllbnQ8VD4ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRlZmluaXRpb246IFdvcmtlckRlZmluaXRpb24pIHtcclxuICAgICAgICBzdXBlcihkZWZpbml0aW9uLCB0cnVlLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4cG9zZWQgaW5zdGFuY2Ugb2YgdGhlIHByaXZhdGUgd29ya2VyIGluc3RhbmNlIHRvIGFsbG93IHRlc3RpbmcgJiBzcHlpbmdcclxuICAgICAqL1xyXG4gICAgZ2V0IHdvcmtlckluc3RhbmNlKCk6IFQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpc1snd29ya2VyUmVmJ10gYXMgQ2xpZW50V2ViV29ya2VyPFQ+KS53b3JrZXJJbnN0YW5jZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBhY2Nlc3Mgd29ya2VyIGluc3RhbmNlIHVudGlsIHRoZSBjb25uZWN0IG1ldGhvZCBoYXMgYmVlbiBjYWxsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IGBUZXN0V29ya2VyQ2xpZW50YFxyXG4gKiBAcGFyYW0gd29ya2VyQ2xhc3Mgd29ya2VyIGNsYXNzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGVzdENsaWVudDxUPih3b3JrZXJDbGFzczogV2ViV29ya2VyVHlwZTxUPik6IFdvcmtlclRlc3RpbmdDbGllbnQ8VD4ge1xyXG4gICAgaWYgKCFXb3JrZXJVdGlscy5nZXRBbm5vdGF0aW9uKHdvcmtlckNsYXNzLCBXb3JrZXJBbm5vdGF0aW9ucy5Jc1dvcmtlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZVRlc3RDbGllbnQ6IHRoZSBwcm92aWRlZCBjbGFzcyBtdXN0IGJlIGRlY29yYXRlZCB3aXRoIEBBbmd1bGFyV2ViV29ya2VyKCknKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBXb3JrZXJUZXN0aW5nQ2xpZW50KHsgd29ya2VyOiB3b3JrZXJDbGFzcywgaW5pdEZuOiAoKSA9PiBudWxsIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==