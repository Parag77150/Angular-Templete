import * as tslib_1 from "tslib";
import { WorkerManager } from 'angular-web-worker/angular';
import { WorkerTestingClient } from './worker-testing-client';
/**
 * **Used for Testing**
 *
 * Testing implementation of the `WorkerManager` service, overriding the `createClient()` method to create a testable instance of the
 * `WorkerClient`
 *
 */
var WorkerTestingManager = /** @class */ (function (_super) {
    tslib_1.__extends(WorkerTestingManager, _super);
    function WorkerTestingManager(workers) {
        var _this = _super.call(this, workers.map(function (x) {
            return { worker: x, initFn: function () { return null; } };
        })) || this;
        _this.workers = workers;
        if (!workers) {
            throw new Error('the workers argument for the TestWorkerManager constructor cannot be undefined or null');
        }
        return _this;
    }
    WorkerTestingManager.prototype.createClient = function (workerType, runInApp) {
        if (runInApp === void 0) { runInApp = false; }
        var definition = this.workers.filter(function (p) { return p === workerType; })[0];
        if (definition) {
            return new WorkerTestingClient({ worker: workerType, initFn: function () { return null; } });
        }
        else {
            throw new Error('WorkerManager: all web workers must be registered in the createTestManager function');
        }
    };
    return WorkerTestingManager;
}(WorkerManager));
export { WorkerTestingManager };
/**
 * Creates a new `TestWorkerManager`
 * @param workers array of workers that can be created through the `createClient` method
 */
export function createTestManager(workers) {
    return new WorkerTestingManager(workers);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLXRlc3RpbmctbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItd2ViLXdvcmtlci90ZXN0aW5nLyIsInNvdXJjZXMiOlsibGliL3dvcmtlci10ZXN0aW5nLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQWdCLE1BQU0sNEJBQTRCLENBQUM7QUFFekUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFOUQ7Ozs7OztHQU1HO0FBQ0g7SUFBMEMsZ0RBQWE7SUFFbkQsOEJBQW9CLE9BQTZCO1FBQWpELFlBRUksa0JBQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUM7WUFDZixPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJLEVBQUUsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQyxTQUtOO1FBVG1CLGFBQU8sR0FBUCxPQUFPLENBQXNCO1FBTTdDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLHdGQUF3RixDQUFDLENBQUM7U0FDN0c7O0lBQ0wsQ0FBQztJQUVELDJDQUFZLEdBQVosVUFBZ0IsVUFBNEIsRUFBRSxRQUF5QjtRQUF6Qix5QkFBQSxFQUFBLGdCQUF5QjtRQUNuRSxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsS0FBSyxVQUFVLEVBQWhCLENBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFJLFVBQVUsRUFBRTtZQUNaLE9BQU8sSUFBSSxtQkFBbUIsQ0FBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGNBQU0sT0FBQSxJQUFJLEVBQUosQ0FBSSxFQUFFLENBQUMsQ0FBQztTQUNqRjthQUFNO1lBQ0gsTUFBTSxJQUFJLEtBQUssQ0FBQyxxRkFBcUYsQ0FBQyxDQUFDO1NBQzFHO0lBQ0wsQ0FBQztJQUVMLDJCQUFDO0FBQUQsQ0FBQyxBQXRCRCxDQUEwQyxhQUFhLEdBc0J0RDs7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsT0FBNkI7SUFDM0QsT0FBTyxJQUFJLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXb3JrZXJNYW5hZ2VyLCBXb3JrZXJDbGllbnQgfSBmcm9tICdhbmd1bGFyLXdlYi13b3JrZXIvYW5ndWxhcic7XHJcbmltcG9ydCB7IFdlYldvcmtlclR5cGUgfSBmcm9tICdhbmd1bGFyLXdlYi13b3JrZXIvY29tbW9uJztcclxuaW1wb3J0IHsgV29ya2VyVGVzdGluZ0NsaWVudCB9IGZyb20gJy4vd29ya2VyLXRlc3RpbmctY2xpZW50JztcclxuXHJcbi8qKlxyXG4gKiAqKlVzZWQgZm9yIFRlc3RpbmcqKlxyXG4gKlxyXG4gKiBUZXN0aW5nIGltcGxlbWVudGF0aW9uIG9mIHRoZSBgV29ya2VyTWFuYWdlcmAgc2VydmljZSwgb3ZlcnJpZGluZyB0aGUgYGNyZWF0ZUNsaWVudCgpYCBtZXRob2QgdG8gY3JlYXRlIGEgdGVzdGFibGUgaW5zdGFuY2Ugb2YgdGhlXHJcbiAqIGBXb3JrZXJDbGllbnRgXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV29ya2VyVGVzdGluZ01hbmFnZXIgZXh0ZW5kcyBXb3JrZXJNYW5hZ2VyIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHdvcmtlcnM6IFdlYldvcmtlclR5cGU8YW55PltdKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKHdvcmtlcnMubWFwKHggPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4geyB3b3JrZXI6IHgsIGluaXRGbjogKCkgPT4gbnVsbCB9O1xyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgaWYgKCF3b3JrZXJzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndGhlIHdvcmtlcnMgYXJndW1lbnQgZm9yIHRoZSBUZXN0V29ya2VyTWFuYWdlciBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgdW5kZWZpbmVkIG9yIG51bGwnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQ2xpZW50PFQ+KHdvcmtlclR5cGU6IFdlYldvcmtlclR5cGU8VD4sIHJ1bkluQXBwOiBib29sZWFuID0gZmFsc2UpOiBXb3JrZXJDbGllbnQ8VD4ge1xyXG4gICAgICAgIGNvbnN0IGRlZmluaXRpb24gPSB0aGlzLndvcmtlcnMuZmlsdGVyKHAgPT4gcCA9PT0gd29ya2VyVHlwZSlbMF07XHJcbiAgICAgICAgaWYgKGRlZmluaXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JrZXJUZXN0aW5nQ2xpZW50PFQ+KHsgd29ya2VyOiB3b3JrZXJUeXBlLCBpbml0Rm46ICgpID0+IG51bGwgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3JrZXJNYW5hZ2VyOiBhbGwgd2ViIHdvcmtlcnMgbXVzdCBiZSByZWdpc3RlcmVkIGluIHRoZSBjcmVhdGVUZXN0TWFuYWdlciBmdW5jdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IGBUZXN0V29ya2VyTWFuYWdlcmBcclxuICogQHBhcmFtIHdvcmtlcnMgYXJyYXkgb2Ygd29ya2VycyB0aGF0IGNhbiBiZSBjcmVhdGVkIHRocm91Z2ggdGhlIGBjcmVhdGVDbGllbnRgIG1ldGhvZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRlc3RNYW5hZ2VyKHdvcmtlcnM6IFdlYldvcmtlclR5cGU8YW55PltdKTogV29ya2VyVGVzdGluZ01hbmFnZXIge1xyXG4gICAgcmV0dXJuIG5ldyBXb3JrZXJUZXN0aW5nTWFuYWdlcih3b3JrZXJzKTtcclxufVxyXG4iXX0=