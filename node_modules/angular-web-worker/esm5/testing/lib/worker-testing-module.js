import { WorkerModule, WorkerManager } from 'angular-web-worker/angular';
import { WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';
import { WorkerTestingManager } from './worker-testing-manager';
/**
 * **Used for Testing**
 *
 * Testing implementation a `WorkerModule`, which provides a `WorkerTestingManager` that creates testable worker client that dos not run in a worker script but mocks the serialization that occurs when messages are transfered to
 * and from a worker.
 */
var WorkerTestingModule = /** @class */ (function () {
    function WorkerTestingModule() {
    }
    WorkerTestingModule.forWorkers = function (workers) {
        workers.forEach(function (wkr) {
            if (!WorkerUtils.getAnnotation(wkr, WorkerAnnotations.IsWorker)) {
                throw new Error('WorkerModule: one or more of the provided workers has not been decorated with the @AngularWebWorker decorator');
            }
        });
        return {
            ngModule: WorkerModule,
            providers: [
                { provide: WorkerManager, useValue: new WorkerTestingManager(workers) }
            ]
        };
    };
    return WorkerTestingModule;
}());
export { WorkerTestingModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLXRlc3RpbmctbW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci13ZWItd29ya2VyL3Rlc3RpbmcvIiwic291cmNlcyI6WyJsaWIvd29ya2VyLXRlc3RpbmctbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDekUsT0FBTyxFQUFpQixXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVoRTs7Ozs7R0FLRztBQUNIO0lBQUE7SUFpQkEsQ0FBQztJQWZVLDhCQUFVLEdBQWpCLFVBQWtCLE9BQTZCO1FBRTNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHO1lBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDN0QsTUFBTSxJQUFJLEtBQUssQ0FBQywrR0FBK0csQ0FBQyxDQUFDO2FBQ3BJO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPO1lBQ0gsUUFBUSxFQUFFLFlBQVk7WUFDdEIsU0FBUyxFQUFFO2dCQUNQLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsSUFBSSxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsRUFBRTthQUMxRTtTQUNKLENBQUM7SUFDTixDQUFDO0lBQ0wsMEJBQUM7QUFBRCxDQUFDLEFBakJELElBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV29ya2VyTW9kdWxlLCBXb3JrZXJNYW5hZ2VyIH0gZnJvbSAnYW5ndWxhci13ZWItd29ya2VyL2FuZ3VsYXInO1xyXG5pbXBvcnQgeyBXZWJXb3JrZXJUeXBlLCBXb3JrZXJVdGlscywgV29ya2VyQW5ub3RhdGlvbnMgfSBmcm9tICdhbmd1bGFyLXdlYi13b3JrZXIvY29tbW9uJztcclxuaW1wb3J0IHsgV29ya2VyVGVzdGluZ01hbmFnZXIgfSBmcm9tICcuL3dvcmtlci10ZXN0aW5nLW1hbmFnZXInO1xyXG5cclxuLyoqXHJcbiAqICoqVXNlZCBmb3IgVGVzdGluZyoqXHJcbiAqXHJcbiAqIFRlc3RpbmcgaW1wbGVtZW50YXRpb24gYSBgV29ya2VyTW9kdWxlYCwgd2hpY2ggcHJvdmlkZXMgYSBgV29ya2VyVGVzdGluZ01hbmFnZXJgIHRoYXQgY3JlYXRlcyB0ZXN0YWJsZSB3b3JrZXIgY2xpZW50IHRoYXQgZG9zIG5vdCBydW4gaW4gYSB3b3JrZXIgc2NyaXB0IGJ1dCBtb2NrcyB0aGUgc2VyaWFsaXphdGlvbiB0aGF0IG9jY3VycyB3aGVuIG1lc3NhZ2VzIGFyZSB0cmFuc2ZlcmVkIHRvXHJcbiAqIGFuZCBmcm9tIGEgd29ya2VyLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFdvcmtlclRlc3RpbmdNb2R1bGUge1xyXG5cclxuICAgIHN0YXRpYyBmb3JXb3JrZXJzKHdvcmtlcnM6IFdlYldvcmtlclR5cGU8YW55PltdKSB7XHJcblxyXG4gICAgICAgIHdvcmtlcnMuZm9yRWFjaCgod2tyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghV29ya2VyVXRpbHMuZ2V0QW5ub3RhdGlvbih3a3IsIFdvcmtlckFubm90YXRpb25zLklzV29ya2VyKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3JrZXJNb2R1bGU6IG9uZSBvciBtb3JlIG9mIHRoZSBwcm92aWRlZCB3b3JrZXJzIGhhcyBub3QgYmVlbiBkZWNvcmF0ZWQgd2l0aCB0aGUgQEFuZ3VsYXJXZWJXb3JrZXIgZGVjb3JhdG9yJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmdNb2R1bGU6IFdvcmtlck1vZHVsZSxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IFdvcmtlck1hbmFnZXIsIHVzZVZhbHVlOiBuZXcgV29ya2VyVGVzdGluZ01hbmFnZXIod29ya2VycykgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iXX0=