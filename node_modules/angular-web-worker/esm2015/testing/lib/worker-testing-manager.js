import { WorkerManager } from 'angular-web-worker/angular';
import { WorkerTestingClient } from './worker-testing-client';
/**
 * **Used for Testing**
 *
 * Testing implementation of the `WorkerManager` service, overriding the `createClient()` method to create a testable instance of the
 * `WorkerClient`
 *
 */
export class WorkerTestingManager extends WorkerManager {
    constructor(workers) {
        super(workers.map(x => {
            return { worker: x, initFn: () => null };
        }));
        this.workers = workers;
        if (!workers) {
            throw new Error('the workers argument for the TestWorkerManager constructor cannot be undefined or null');
        }
    }
    createClient(workerType, runInApp = false) {
        const definition = this.workers.filter(p => p === workerType)[0];
        if (definition) {
            return new WorkerTestingClient({ worker: workerType, initFn: () => null });
        }
        else {
            throw new Error('WorkerManager: all web workers must be registered in the createTestManager function');
        }
    }
}
/**
 * Creates a new `TestWorkerManager`
 * @param workers array of workers that can be created through the `createClient` method
 */
export function createTestManager(workers) {
    return new WorkerTestingManager(workers);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLXRlc3RpbmctbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItd2ViLXdvcmtlci90ZXN0aW5nLyIsInNvdXJjZXMiOlsibGliL3dvcmtlci10ZXN0aW5nLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBZ0IsTUFBTSw0QkFBNEIsQ0FBQztBQUV6RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU5RDs7Ozs7O0dBTUc7QUFDSCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsYUFBYTtJQUVuRCxZQUFvQixPQUE2QjtRQUU3QyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsQixPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUpZLFlBQU8sR0FBUCxPQUFPLENBQXNCO1FBTTdDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLHdGQUF3RixDQUFDLENBQUM7U0FDN0c7SUFDTCxDQUFDO0lBRUQsWUFBWSxDQUFJLFVBQTRCLEVBQUUsV0FBb0IsS0FBSztRQUNuRSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFJLFVBQVUsRUFBRTtZQUNaLE9BQU8sSUFBSSxtQkFBbUIsQ0FBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDakY7YUFBTTtZQUNILE1BQU0sSUFBSSxLQUFLLENBQUMscUZBQXFGLENBQUMsQ0FBQztTQUMxRztJQUNMLENBQUM7Q0FFSjtBQUVEOzs7R0FHRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxPQUE2QjtJQUMzRCxPQUFPLElBQUksb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdvcmtlck1hbmFnZXIsIFdvcmtlckNsaWVudCB9IGZyb20gJ2FuZ3VsYXItd2ViLXdvcmtlci9hbmd1bGFyJztcclxuaW1wb3J0IHsgV2ViV29ya2VyVHlwZSB9IGZyb20gJ2FuZ3VsYXItd2ViLXdvcmtlci9jb21tb24nO1xyXG5pbXBvcnQgeyBXb3JrZXJUZXN0aW5nQ2xpZW50IH0gZnJvbSAnLi93b3JrZXItdGVzdGluZy1jbGllbnQnO1xyXG5cclxuLyoqXHJcbiAqICoqVXNlZCBmb3IgVGVzdGluZyoqXHJcbiAqXHJcbiAqIFRlc3RpbmcgaW1wbGVtZW50YXRpb24gb2YgdGhlIGBXb3JrZXJNYW5hZ2VyYCBzZXJ2aWNlLCBvdmVycmlkaW5nIHRoZSBgY3JlYXRlQ2xpZW50KClgIG1ldGhvZCB0byBjcmVhdGUgYSB0ZXN0YWJsZSBpbnN0YW5jZSBvZiB0aGVcclxuICogYFdvcmtlckNsaWVudGBcclxuICpcclxuICovXHJcbmV4cG9ydCBjbGFzcyBXb3JrZXJUZXN0aW5nTWFuYWdlciBleHRlbmRzIFdvcmtlck1hbmFnZXIge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgd29ya2VyczogV2ViV29ya2VyVHlwZTxhbnk+W10pIHtcclxuXHJcbiAgICAgICAgc3VwZXIod29ya2Vycy5tYXAoeCA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHdvcmtlcjogeCwgaW5pdEZuOiAoKSA9PiBudWxsIH07XHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBpZiAoIXdvcmtlcnMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aGUgd29ya2VycyBhcmd1bWVudCBmb3IgdGhlIFRlc3RXb3JrZXJNYW5hZ2VyIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSB1bmRlZmluZWQgb3IgbnVsbCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVDbGllbnQ8VD4od29ya2VyVHlwZTogV2ViV29ya2VyVHlwZTxUPiwgcnVuSW5BcHA6IGJvb2xlYW4gPSBmYWxzZSk6IFdvcmtlckNsaWVudDxUPiB7XHJcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHRoaXMud29ya2Vycy5maWx0ZXIocCA9PiBwID09PSB3b3JrZXJUeXBlKVswXTtcclxuICAgICAgICBpZiAoZGVmaW5pdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFdvcmtlclRlc3RpbmdDbGllbnQ8VD4oeyB3b3JrZXI6IHdvcmtlclR5cGUsIGluaXRGbjogKCkgPT4gbnVsbCB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dvcmtlck1hbmFnZXI6IGFsbCB3ZWIgd29ya2VycyBtdXN0IGJlIHJlZ2lzdGVyZWQgaW4gdGhlIGNyZWF0ZVRlc3RNYW5hZ2VyIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgYFRlc3RXb3JrZXJNYW5hZ2VyYFxyXG4gKiBAcGFyYW0gd29ya2VycyBhcnJheSBvZiB3b3JrZXJzIHRoYXQgY2FuIGJlIGNyZWF0ZWQgdGhyb3VnaCB0aGUgYGNyZWF0ZUNsaWVudGAgbWV0aG9kXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGVzdE1hbmFnZXIod29ya2VyczogV2ViV29ya2VyVHlwZTxhbnk+W10pOiBXb3JrZXJUZXN0aW5nTWFuYWdlciB7XHJcbiAgICByZXR1cm4gbmV3IFdvcmtlclRlc3RpbmdNYW5hZ2VyKHdvcmtlcnMpO1xyXG59XHJcbiJdfQ==