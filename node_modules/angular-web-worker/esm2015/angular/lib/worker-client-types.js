//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"worker-client-types.js","sourceRoot":"ng://angular-web-worker/angular/","sources":["lib/worker-client-types.ts"],"names":[],"mappings":"","sourcesContent":["import { Subject, Subscription, Observable } from 'rxjs';\r\nimport { WorkerResponseEvent, SecretResult, WorkerEvents, WorkerAccessableBody, WorkerSubscribableBody, WorkerCallableBody } from 'angular-web-worker/common';\r\n\r\n/**\r\n * A dictionary of client observables that have been created to listen to events trigger by RxJS subjects in the worker.\r\n * The dictionary keys map the the messages that are sent from the worker to a particular observable in the client.\r\n */\r\nexport interface WorkerClientObservablesDict {\r\n    [key: string]: WorkerClientObservableRef;\r\n}\r\n\r\n/**\r\n * A definition of a client observable that listens to events triggered by RxJS subjects in the worker and then triggers events in the browser\r\n * which depends on which `WorkerClient` method was used to create the listener\r\n */\r\nexport interface WorkerClientObservableRef {\r\n    /**\r\n     * The event that is triggered in the client when a observable message is recieved from the worker.\r\n     * This will either execute a subscription or trigger an observable depending on whether the event listener was registered with the\r\n     * `WorkerClient.subscribe()` or `WorkerClient.observe()` method.\r\n     */\r\n    subject: Subject<any>;\r\n    /**\r\n     * A subscription to the `WorkerClientObservableRef.subject` which is created and returned by the `WorkerClient.subscribe()` method.\r\n     */\r\n    subscription: Subscription;\r\n    /**\r\n     *  An observable from the `WorkerClientObservableRef.subject` which is created and returned by the `WorkerClient.observe()` method.\r\n     */\r\n    observable: Observable<any>;\r\n    /**\r\n     * The name of the worker's RxJS subject property that the client is listening to\r\n     */\r\n    propertyName: string;\r\n}\r\n\r\n/**\r\n * Configurable options that defines how a `WorkerClient` sends a request to, and handles the response from a `WorkerController` through the `WorkerClient.sendRequest()` method\r\n */\r\nexport interface WorkerClientRequestOpts<T, EventType extends number, ReturnType> {\r\n    /**\r\n     * Whether the request is triggered by the init event and therefore not requiring the client's connected property to be true\r\n     */\r\n    isConnect?: boolean;\r\n    /**\r\n     * The worker property to which the request relates. Can be provided as a string, or a lamda function which is used in the `WorkerClient`'s APIs\r\n     */\r\n    workerProperty?: ((worker: T) => ReturnType) | string;\r\n    /**\r\n     * The error message when the `WorkerClient.sendRequest()` method is rejected from the targeted worker property/method not returning the correct `SecretResult`\r\n     * when called upon by the client\r\n     */\r\n    secretError: string;\r\n    /**\r\n     * Any conditions that need to be met, in addition to the correct `SecretResult`, before a request can be made to the worker\r\n     */\r\n    additionalConditions?: { if: (secretResult?: SecretResult<EventType>) => boolean, reject: (secretResult?: SecretResult<EventType>) => any }[];\r\n    /**\r\n     * A placeholder to perform unique work in the more generic `WorkerClient.sendRequest()` method. This occurs immediately before the client sends the request to\r\n     * the worker and after the `SecretKey` is validated, along with any `additionalConditions` if the option was specified. The value returned\r\n     * by this function is available for use through the `additionalContext` arguments in the `body`, `resolve` and `beforeReject` options' functions\r\n     */\r\n    beforeRequest?: (secretResult?: SecretResult<EventType>) => any;\r\n    /**\r\n     * Must return the `WorkerRequestEvent.body` that will be sent to the worker.  The structure is determined by the `WorkerClientRequestOpts`'s\r\n     * `EventType` type argument\r\n     * @param secretResult the `SecretResult` that is returned when the client called upon the targeted worker property or method\r\n     * @param additionalContext if the `beforeRequest` option is provided it is the returned result of that function\r\n     * otherwise it will be undefined\r\n     */\r\n    body?: (secretResult?: SecretResult<EventType>, additionalContext?: any) => EventType extends WorkerEvents.Callable ? WorkerCallableBody\r\n        : EventType extends WorkerEvents.Accessable ? WorkerAccessableBody\r\n        : EventType extends WorkerEvents.Observable ? WorkerSubscribableBody : null;\r\n    /**\r\n     * Function that returns the value that is resolved by the `WorkerClient.sendRequest()` method. Only occurs if a successful request has been made to, and a response has been recieved from the worker\r\n     * @param response the `WorkerResponseEvent` that was returned by the worker\r\n     * @param secretResult the `SecretResult` that was returned when the client called upon the targeted worker property or method\r\n     * @param additionalContext if the `beforeRequest` option is provided it is the returned result of that function\r\n     * otherwise it will be undefined\r\n     */\r\n    resolve?: (response?: WorkerResponseEvent<any>, secretResult?: SecretResult<EventType>, additionalContext?: any) => any;\r\n    /**\r\n     * A placeholder to perform unique work in the more generic `WorkerClient.sendRequest()` method. This occurs immediately before the request is rejected due to an error\r\n     * being caught\r\n     * @param response the `WorkerResponseEvent` that was returned by the worker\r\n     * @param secretResult the `SecretResult` that was returned when the client called upon the targeted worker property or method\r\n     * @param additionalContext if the `beforeRequest` option is provided it is the returned result of that function\r\n     */\r\n    beforeReject?: (response?: WorkerResponseEvent<any>, secretResult?: SecretResult<EventType>, additionalContext?: any) => void;\r\n}\r\n\r\n\r\n"]}