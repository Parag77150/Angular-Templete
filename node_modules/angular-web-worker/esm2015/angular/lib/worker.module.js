import * as tslib_1 from "tslib";
var WorkerModule_1;
import { WorkerManager } from './worker-manager';
import { NgModule } from '@angular/core';
import { WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';
/**
 * Provides the `WorkerManager` service with the worker definitions passed into the static `forWorkers` method.
 * @example
 * imports: [
 *  WorkerModule.forWorkers([
 *    {worker: AppWorker, initFn: () => new Worker('./app.worker.ts', {type: 'module'})},
 *  ])
 * ]
 */
let WorkerModule = WorkerModule_1 = class WorkerModule {
    /**
     * Returns a module with a `WorkerManager` provider
     * @param workerDefinitions list of worker defintions which contain the worker class and an `initFn` function which is necessary for the
     * webpack `worker-plugin` to bundle the worker seperately.
     * @example
     * imports: [
     *  WorkerModule.forWorkers([
     *    {worker: AppWorker, initFn: () => new Worker('./app.worker.ts', {type: 'module'})},
     *  ])
     * ]
    */
    static forWorkers(workerDefinitions) {
        workerDefinitions.forEach((definition) => {
            if (!WorkerUtils.getAnnotation(definition.worker, WorkerAnnotations.IsWorker)) {
                throw new Error('WorkerModule: one or more of the provided workers has not been decorated with the @AngularWebWorker decorator');
            }
        });
        return {
            ngModule: WorkerModule_1,
            providers: [
                { provide: WorkerManager, useValue: new WorkerManager(workerDefinitions) }
            ]
        };
    }
};
WorkerModule = WorkerModule_1 = tslib_1.__decorate([
    NgModule()
], WorkerModule);
export { WorkerModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItd2ViLXdvcmtlci9hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL3dvcmtlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBaUIsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUUxRjs7Ozs7Ozs7R0FRRztBQUVILElBQWEsWUFBWSxvQkFBekIsTUFBYSxZQUFZO0lBRXJCOzs7Ozs7Ozs7O01BVUU7SUFDRixNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFxQztRQUVuRCxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUMzRSxNQUFNLElBQUksS0FBSyxDQUFDLCtHQUErRyxDQUFDLENBQUM7YUFDcEk7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU87WUFDSCxRQUFRLEVBQUUsY0FBWTtZQUN0QixTQUFTLEVBQUU7Z0JBQ1AsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO2FBQzdFO1NBQ0osQ0FBQztJQUNOLENBQUM7Q0FFSixDQUFBO0FBN0JZLFlBQVk7SUFEeEIsUUFBUSxFQUFFO0dBQ0UsWUFBWSxDQTZCeEI7U0E3QlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBXb3JrZXJNYW5hZ2VyIH0gZnJvbSAnLi93b3JrZXItbWFuYWdlcic7XHJcbmltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFdvcmtlclV0aWxzLCBXZWJXb3JrZXJUeXBlLCBXb3JrZXJBbm5vdGF0aW9ucyB9IGZyb20gJ2FuZ3VsYXItd2ViLXdvcmtlci9jb21tb24nO1xyXG5cclxuLyoqXHJcbiAqIFByb3ZpZGVzIHRoZSBgV29ya2VyTWFuYWdlcmAgc2VydmljZSB3aXRoIHRoZSB3b3JrZXIgZGVmaW5pdGlvbnMgcGFzc2VkIGludG8gdGhlIHN0YXRpYyBgZm9yV29ya2Vyc2AgbWV0aG9kLlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBpbXBvcnRzOiBbXHJcbiAqICBXb3JrZXJNb2R1bGUuZm9yV29ya2VycyhbXHJcbiAqICAgIHt3b3JrZXI6IEFwcFdvcmtlciwgaW5pdEZuOiAoKSA9PiBuZXcgV29ya2VyKCcuL2FwcC53b3JrZXIudHMnLCB7dHlwZTogJ21vZHVsZSd9KX0sXHJcbiAqICBdKVxyXG4gKiBdXHJcbiAqL1xyXG5ATmdNb2R1bGUoKVxyXG5leHBvcnQgY2xhc3MgV29ya2VyTW9kdWxlIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBtb2R1bGUgd2l0aCBhIGBXb3JrZXJNYW5hZ2VyYCBwcm92aWRlclxyXG4gICAgICogQHBhcmFtIHdvcmtlckRlZmluaXRpb25zIGxpc3Qgb2Ygd29ya2VyIGRlZmludGlvbnMgd2hpY2ggY29udGFpbiB0aGUgd29ya2VyIGNsYXNzIGFuZCBhbiBgaW5pdEZuYCBmdW5jdGlvbiB3aGljaCBpcyBuZWNlc3NhcnkgZm9yIHRoZVxyXG4gICAgICogd2VicGFjayBgd29ya2VyLXBsdWdpbmAgdG8gYnVuZGxlIHRoZSB3b3JrZXIgc2VwZXJhdGVseS5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBpbXBvcnRzOiBbXHJcbiAgICAgKiAgV29ya2VyTW9kdWxlLmZvcldvcmtlcnMoW1xyXG4gICAgICogICAge3dvcmtlcjogQXBwV29ya2VyLCBpbml0Rm46ICgpID0+IG5ldyBXb3JrZXIoJy4vYXBwLndvcmtlci50cycsIHt0eXBlOiAnbW9kdWxlJ30pfSxcclxuICAgICAqICBdKVxyXG4gICAgICogXVxyXG4gICAgKi9cclxuICAgIHN0YXRpYyBmb3JXb3JrZXJzKHdvcmtlckRlZmluaXRpb25zOiBXb3JrZXJEZWZpbml0aW9uW10pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPGFueT4ge1xyXG5cclxuICAgICAgICB3b3JrZXJEZWZpbml0aW9ucy5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghV29ya2VyVXRpbHMuZ2V0QW5ub3RhdGlvbihkZWZpbml0aW9uLndvcmtlciwgV29ya2VyQW5ub3RhdGlvbnMuSXNXb3JrZXIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dvcmtlck1vZHVsZTogb25lIG9yIG1vcmUgb2YgdGhlIHByb3ZpZGVkIHdvcmtlcnMgaGFzIG5vdCBiZWVuIGRlY29yYXRlZCB3aXRoIHRoZSBAQW5ndWxhcldlYldvcmtlciBkZWNvcmF0b3InKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZ01vZHVsZTogV29ya2VyTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogV29ya2VyTWFuYWdlciwgdXNlVmFsdWU6IG5ldyBXb3JrZXJNYW5hZ2VyKHdvcmtlckRlZmluaXRpb25zKSB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEEgZGVmaW5pdGlvbiBvZiBhIHdvcmtlciB0aGF0IGlzIHJlcXVpcmVkIHRvIGNyZWF0ZSBuZXcgd29ya2VyIGluc3RhbmNlc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBXb3JrZXJEZWZpbml0aW9uIHtcclxuICAgIC8qKlxyXG4gICAgICogdGhlIHdvcmtlciBjbGFzcyB3aGljaCBoYXMgYmVlbiBkZWNvcmF0ZWQgd2l0aCBgQEFuZ3VsYXJXZWJXb3JrZXIoKWBcclxuICAgICAqL1xyXG4gICAgd29ya2VyOiBXZWJXb3JrZXJUeXBlPGFueT47XHJcbiAgICAvKipcclxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGEgd29ya2VyLiBUaGlzIGlzIHJlcXVpcmVkIGZvciB0aGUgd2VicGFjayBgd29ya2VyLXBsdWdpbmAgdG8gYnVuZGxlIHRoZSB3b3JrZXIgc2VwZXJhdGVseSBhbmQgaXMgdXNlZCBieSBhIGBXb3JrZXJDbGllbnRgXHJcbiAgICAgKiB0byBjcmVhdGUgYSBuZXcgd29ya2VyXHJcbiAgICAgKlxyXG4gICAgICogKipJTVBPUlRBTlQqKlxyXG4gICAgICpcclxuICAgICAqIFRoZSBzeW50YXggaXMgY3J1Y2lhbCBmb3IgdGhlIHdlYnBhY2sgcGx1Z2luLiBUaGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nIGFuZCB0aGUge3R5cGU6ICdtb2R1bGUnfSBhcmd1bWVudCBtdXN0IGJlIGdpdmVuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogKCkgPT4gbmV3IFdvcmtlcignLi9hcHAud29ya2VyLnRzJywge3R5cGU6ICdtb2R1bGUnfSlcclxuICAgICAqL1xyXG4gICAgaW5pdEZuOiAoKSA9PiBXb3JrZXI7XHJcbn1cclxuIl19