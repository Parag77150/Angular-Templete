import { WorkerController } from 'angular-web-worker';
/**
 * Used to mock the behaviour of the native `Worker` class when a `WorkerClient` is set to run in the app and not in the worker script.
 * Controls the flow of messages to and from a `WorkerClient` and a `WorkerController`
 */
export class ClientWebWorker {
    /**
     * Creates a new instance of a `ClientWebWorker`
     * @param workerType the worker class
     * @param isTestClient whether the instance is used for testing which will then mock serialization
     */
    constructor(workerType, isTestClient) {
        this.isTestClient = isTestClient;
        this.messageBus = {
            onmessage: () => { },
            postMessage: (resp) => {
                this.onmessage(new MessageEvent('ClientWebWorker', { data: this.isTestClient ? this.serialize(resp) : resp }));
            }
        };
        this.controller = new WorkerController(workerType, this.messageBus);
    }
    /**
     * Returns instance of worker class
     */
    get workerInstance() {
        return this.controller.workerInstance;
    }
    /**
     * Message listener for a `WorkerClient`
     */
    onmessage(ev) {
    }
    /**
     * Sends messages triggered from a `WorkerClient` to a `WorkerController`
     */
    postMessage(resp) {
        this.messageBus.onmessage(new MessageEvent('ClientWebWorker', { data: this.isTestClient ? this.serialize(resp) : resp }));
    }
    /**
     * Unsubscribes from all subscriptions in the `WorkerController` and then destroys the controller
     */
    terminate() {
        this.controller.removeAllSubscriptions();
        this.controller = null;
    }
    /**
     * Used for testing to mock the serialization that occurs when native the postMessage or onmessage are used to communicate with a worker script
     * @param obj object to be serialised
     */
    serialize(obj) {
        return JSON.parse(JSON.stringify(obj));
    }
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    onerror(err) {
    }
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    addEventListener() {
    }
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    removeEventListener() {
    }
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    dispatchEvent(evt) {
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LXdlYi13b3JrZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXdlYi13b3JrZXIvYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jbGllbnQtd2ViLXdvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUd0RDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQWF4Qjs7OztPQUlHO0lBQ0gsWUFBWSxVQUE0QixFQUFVLFlBQXFCO1FBQXJCLGlCQUFZLEdBQVosWUFBWSxDQUFTO1FBQ25FLElBQUksQ0FBQyxVQUFVLEdBQUc7WUFDZCxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztZQUNwQixXQUFXLEVBQUUsQ0FBQyxJQUFTLEVBQUUsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbkgsQ0FBQztTQUNKLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLGNBQWM7UUFDZCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7T0FFRztJQUNILFNBQVMsQ0FBQyxFQUFnQjtJQUMxQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXLENBQUMsSUFBUztRQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUgsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUztRQUNMLElBQUksQ0FBQyxVQUFVLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUMzQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssU0FBUyxDQUFDLEdBQVE7UUFDdEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBR0Q7OztPQUdHO0lBQ0gsT0FBTyxDQUFDLEdBQVE7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILGdCQUFnQjtJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsbUJBQW1CO0lBQ25CLENBQUM7SUFHRDs7O09BR0c7SUFDSCxhQUFhLENBQUMsR0FBVTtRQUNwQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBR0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXb3JrZXJDb250cm9sbGVyIH0gZnJvbSAnYW5ndWxhci13ZWItd29ya2VyJztcclxuaW1wb3J0IHsgV2ViV29ya2VyVHlwZSwgV29ya2VyTWVzc2FnZUJ1cyB9IGZyb20gJ2FuZ3VsYXItd2ViLXdvcmtlci9jb21tb24nO1xyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gbW9jayB0aGUgYmVoYXZpb3VyIG9mIHRoZSBuYXRpdmUgYFdvcmtlcmAgY2xhc3Mgd2hlbiBhIGBXb3JrZXJDbGllbnRgIGlzIHNldCB0byBydW4gaW4gdGhlIGFwcCBhbmQgbm90IGluIHRoZSB3b3JrZXIgc2NyaXB0LlxyXG4gKiBDb250cm9scyB0aGUgZmxvdyBvZiBtZXNzYWdlcyB0byBhbmQgZnJvbSBhIGBXb3JrZXJDbGllbnRgIGFuZCBhIGBXb3JrZXJDb250cm9sbGVyYFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENsaWVudFdlYldvcmtlcjxUPiBpbXBsZW1lbnRzIFBhcnRpYWw8V29ya2VyPiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIGV4ZWN1dGlvbiBvZiBjb2RlIGluIGEgd29ya2VyXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY29udHJvbGxlcjogV29ya2VyQ29udHJvbGxlcjxUPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEludGVyZmFjZSBmb3IgbWVzc2FnZSBidXMgcHJvdmlkZWQgaW50byBhIGBXb3JrZXJDb250cm9sbGVyYCBhbGxvd2luZyB0aGUgY29tbXVuaWNhdGlvbiBtZWNoYW5pc20gdG8gYmUgaW50ZXJjaGFuZ2VkIGJldHdlZW4gaW4tYXBwLCBhbmQgbmF0aXZlIHdvcmtlclxyXG4gICAgICogY29tbXVuaWNhdGlvbiBtZWNoYW5zaW1zXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbWVzc2FnZUJ1czogV29ya2VyTWVzc2FnZUJ1cztcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBgQ2xpZW50V2ViV29ya2VyYFxyXG4gICAgICogQHBhcmFtIHdvcmtlclR5cGUgdGhlIHdvcmtlciBjbGFzc1xyXG4gICAgICogQHBhcmFtIGlzVGVzdENsaWVudCB3aGV0aGVyIHRoZSBpbnN0YW5jZSBpcyB1c2VkIGZvciB0ZXN0aW5nIHdoaWNoIHdpbGwgdGhlbiBtb2NrIHNlcmlhbGl6YXRpb25cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iod29ya2VyVHlwZTogV2ViV29ya2VyVHlwZTxUPiwgcHJpdmF0ZSBpc1Rlc3RDbGllbnQ6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VCdXMgPSB7XHJcbiAgICAgICAgICAgIG9ubWVzc2FnZTogKCkgPT4geyB9LFxyXG4gICAgICAgICAgICBwb3N0TWVzc2FnZTogKHJlc3A6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbm1lc3NhZ2UobmV3IE1lc3NhZ2VFdmVudCgnQ2xpZW50V2ViV29ya2VyJywgeyBkYXRhOiB0aGlzLmlzVGVzdENsaWVudCA/IHRoaXMuc2VyaWFsaXplKHJlc3ApIDogcmVzcCB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IG5ldyBXb3JrZXJDb250cm9sbGVyKHdvcmtlclR5cGUsIHRoaXMubWVzc2FnZUJ1cyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGluc3RhbmNlIG9mIHdvcmtlciBjbGFzc1xyXG4gICAgICovXHJcbiAgICBnZXQgd29ya2VySW5zdGFuY2UoKTogVCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci53b3JrZXJJbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1lc3NhZ2UgbGlzdGVuZXIgZm9yIGEgYFdvcmtlckNsaWVudGBcclxuICAgICAqL1xyXG4gICAgb25tZXNzYWdlKGV2OiBNZXNzYWdlRXZlbnQpIHtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIG1lc3NhZ2VzIHRyaWdnZXJlZCBmcm9tIGEgYFdvcmtlckNsaWVudGAgdG8gYSBgV29ya2VyQ29udHJvbGxlcmBcclxuICAgICAqL1xyXG4gICAgcG9zdE1lc3NhZ2UocmVzcDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlQnVzLm9ubWVzc2FnZShuZXcgTWVzc2FnZUV2ZW50KCdDbGllbnRXZWJXb3JrZXInLCB7IGRhdGE6IHRoaXMuaXNUZXN0Q2xpZW50ID8gdGhpcy5zZXJpYWxpemUocmVzcCkgOiByZXNwIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVuc3Vic2NyaWJlcyBmcm9tIGFsbCBzdWJzY3JpcHRpb25zIGluIHRoZSBgV29ya2VyQ29udHJvbGxlcmAgYW5kIHRoZW4gZGVzdHJveXMgdGhlIGNvbnRyb2xsZXJcclxuICAgICAqL1xyXG4gICAgdGVybWluYXRlKCkge1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlci5yZW1vdmVBbGxTdWJzY3JpcHRpb25zKCk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgZm9yIHRlc3RpbmcgdG8gbW9jayB0aGUgc2VyaWFsaXphdGlvbiB0aGF0IG9jY3VycyB3aGVuIG5hdGl2ZSB0aGUgcG9zdE1lc3NhZ2Ugb3Igb25tZXNzYWdlIGFyZSB1c2VkIHRvIGNvbW11bmljYXRlIHdpdGggYSB3b3JrZXIgc2NyaXB0XHJcbiAgICAgKiBAcGFyYW0gb2JqIG9iamVjdCB0byBiZSBzZXJpYWxpc2VkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2VyaWFsaXplKG9iajogYW55KTogYW55IHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbnN1cmVzIGNsYXNzIGNvbmZvcm1zIHRvIHRoZSBuYXRpdmUgYFdvcmtlcmAgY2xhc3NcclxuICAgICAqIEBOb3RJbXBsZW1lbnRlZFxyXG4gICAgICovXHJcbiAgICBvbmVycm9yKGVycjogYW55KSB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbnN1cmVzIGNsYXNzIGNvbmZvcm1zIHRvIHRoZSBuYXRpdmUgYFdvcmtlcmAgY2xhc3NcclxuICAgICAqIEBOb3RJbXBsZW1lbnRlZFxyXG4gICAgICovXHJcbiAgICBhZGRFdmVudExpc3RlbmVyKCkge1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5zdXJlcyBjbGFzcyBjb25mb3JtcyB0byB0aGUgbmF0aXZlIGBXb3JrZXJgIGNsYXNzXHJcbiAgICAgKiBATm90SW1wbGVtZW50ZWRcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbnN1cmVzIGNsYXNzIGNvbmZvcm1zIHRvIHRoZSBuYXRpdmUgYFdvcmtlcmAgY2xhc3NcclxuICAgICAqIEBOb3RJbXBsZW1lbnRlZFxyXG4gICAgICovXHJcbiAgICBkaXNwYXRjaEV2ZW50KGV2dDogRXZlbnQpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcblxyXG59XHJcbiJdfQ==