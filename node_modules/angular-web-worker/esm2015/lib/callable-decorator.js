import 'reflect-metadata';
import { WorkerEvents, WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';
/**
 * Allows the decorated worker method to be called, and its value returned, from the `WorkerClient.call()` method.
 * Can be used on both asynchronous and synchronous methods.
 * @Serialized Functions will not be copied and circular referencing structures will cause errors. This applies to both the function arguments and the value returned by the function
 * @param options Configurable options defining how the decorated method is called from a `WorkerClient`
 */
export function Callable(options) {
    return function (target, propertyKey, descriptor) {
        const opts = { shallowTransfer: false };
        if (options) {
            opts.shallowTransfer = options.shallowTransfer ? true : false;
        }
        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.Callables, {
            name: propertyKey,
            shallowTransfer: opts.shallowTransfer,
            returnType: Reflect.getMetadata('design:returntype', target, propertyKey)
        });
        const originalMethod = descriptor.value;
        descriptor.value = function () {
            const context = this;
            const args = Array.prototype.slice.call(arguments);
            const config = context.__worker_config__;
            if (config) {
                if (config.isClient) {
                    const secret = {
                        clientSecret: context.__worker_config__.clientSecret,
                        type: WorkerEvents.Callable,
                        propertyName: propertyKey,
                        body: {
                            args: args
                        }
                    };
                    return secret;
                }
                else {
                    return originalMethod.call(context, ...args);
                }
            }
            else {
                return originalMethod.call(context, ...args);
            }
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbGFibGUtZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci13ZWItd29ya2VyLyIsInNvdXJjZXMiOlsibGliL2NhbGxhYmxlLWRlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGtCQUFrQixDQUFDO0FBQzFCLE9BQU8sRUFBa0MsWUFBWSxFQUFnQixXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQWN2STs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxRQUFRLENBQUMsT0FBc0I7SUFFM0MsT0FBTyxVQUFVLE1BQVcsRUFBRSxXQUFtQixFQUFFLFVBQThCO1FBRTdFLE1BQU0sSUFBSSxHQUFHLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ3hDLElBQUksT0FBTyxFQUFFO1lBQ1QsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUNqRTtRQUVELFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxTQUFTLEVBQW9CO1lBQzFGLElBQUksRUFBRSxXQUFXO1lBQ2pCLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZTtZQUNyQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDO1NBQzVFLENBQUMsQ0FBQztRQUVILE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFDeEMsVUFBVSxDQUFDLEtBQUssR0FBRztZQUNmLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQztZQUNyQixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbkQsTUFBTSxNQUFNLEdBQWlCLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztZQUN2RCxJQUFJLE1BQU0sRUFBRTtnQkFDUixJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7b0JBQ2pCLE1BQU0sTUFBTSxHQUF3Qzt3QkFDaEQsWUFBWSxFQUFFLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZO3dCQUNwRCxJQUFJLEVBQUUsWUFBWSxDQUFDLFFBQVE7d0JBQzNCLFlBQVksRUFBRSxXQUFXO3dCQUN6QixJQUFJLEVBQUU7NEJBQ0YsSUFBSSxFQUFFLElBQUk7eUJBQ2I7cUJBQ0osQ0FBQztvQkFDRixPQUFPLE1BQU0sQ0FBQztpQkFDakI7cUJBQU07b0JBQ0gsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO2lCQUNoRDthQUNKO2lCQUFNO2dCQUNILE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQzthQUNoRDtRQUNMLENBQUMsQ0FBQztRQUNGLE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xyXG5pbXBvcnQgeyBDYWxsYWJsZU1ldGFEYXRhLCBXb3JrZXJDb25maWcsIFdvcmtlckV2ZW50cywgU2VjcmV0UmVzdWx0LCBXb3JrZXJVdGlscywgV29ya2VyQW5ub3RhdGlvbnMgfSBmcm9tICdhbmd1bGFyLXdlYi13b3JrZXIvY29tbW9uJztcclxuXHJcbi8qKlxyXG4gKiBDb25maWd1cmFibGUgb3B0aW9ucyBmb3IgdGhlIGBAQ2FsbGFibGUoKWAgZGVjb3JhdG9yLCBkZWZpbmluZyBob3cgdGhlIGRlY29yYXRlZCBtZXRob2QgaXMgY2FsbGVkIGZyb20gYSBgV29ya2VyQ2xpZW50YC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FsbGFibGVPcHRzIHtcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGUgcHJvdG90eXBlIG9mIHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgZGVjb3JhdGVkIG1ldGhvZCBpcyB0cmFuc2ZlcmVkIGFmdGVyIGl0IGhhcyBiZWVuIHNlcmlhbGl6ZWQgYW5kIHVuc2VyaWFsaXplZCB3aGVuIGJyb3VnaHQgYmFjayB0byB0aGUgYFdvcmtlckNsaWVudGBcclxuICAgICAqIEBkZWZhdWx0dmFsdWUgZmFsc2VcclxuICAgICAqIEBFeHBlcmltZW50YWwgaGFzIGxpbWl0YXRpb25zXHJcbiAgICAgKi9cclxuICAgIHNoYWxsb3dUcmFuc2Zlcj86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbGxvd3MgdGhlIGRlY29yYXRlZCB3b3JrZXIgbWV0aG9kIHRvIGJlIGNhbGxlZCwgYW5kIGl0cyB2YWx1ZSByZXR1cm5lZCwgZnJvbSB0aGUgYFdvcmtlckNsaWVudC5jYWxsKClgIG1ldGhvZC5cclxuICogQ2FuIGJlIHVzZWQgb24gYm90aCBhc3luY2hyb25vdXMgYW5kIHN5bmNocm9ub3VzIG1ldGhvZHMuXHJcbiAqIEBTZXJpYWxpemVkIEZ1bmN0aW9ucyB3aWxsIG5vdCBiZSBjb3BpZWQgYW5kIGNpcmN1bGFyIHJlZmVyZW5jaW5nIHN0cnVjdHVyZXMgd2lsbCBjYXVzZSBlcnJvcnMuIFRoaXMgYXBwbGllcyB0byBib3RoIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMgYW5kIHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgZnVuY3Rpb25cclxuICogQHBhcmFtIG9wdGlvbnMgQ29uZmlndXJhYmxlIG9wdGlvbnMgZGVmaW5pbmcgaG93IHRoZSBkZWNvcmF0ZWQgbWV0aG9kIGlzIGNhbGxlZCBmcm9tIGEgYFdvcmtlckNsaWVudGBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBDYWxsYWJsZShvcHRpb25zPzogQ2FsbGFibGVPcHRzKSB7XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IG9wdHMgPSB7IHNoYWxsb3dUcmFuc2ZlcjogZmFsc2UgfTtcclxuICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICBvcHRzLnNoYWxsb3dUcmFuc2ZlciA9IG9wdGlvbnMuc2hhbGxvd1RyYW5zZmVyID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgV29ya2VyVXRpbHMucHVzaEFubm90YXRpb24odGFyZ2V0LmNvbnN0cnVjdG9yLCBXb3JrZXJBbm5vdGF0aW9ucy5DYWxsYWJsZXMsIDxDYWxsYWJsZU1ldGFEYXRhPntcclxuICAgICAgICAgICAgbmFtZTogcHJvcGVydHlLZXksXHJcbiAgICAgICAgICAgIHNoYWxsb3dUcmFuc2Zlcjogb3B0cy5zaGFsbG93VHJhbnNmZXIsXHJcbiAgICAgICAgICAgIHJldHVyblR5cGU6IFJlZmxlY3QuZ2V0TWV0YWRhdGEoJ2Rlc2lnbjpyZXR1cm50eXBlJywgdGFyZ2V0LCBwcm9wZXJ0eUtleSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xyXG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xyXG4gICAgICAgICAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgY29uc3QgY29uZmlnOiBXb3JrZXJDb25maWcgPSBjb250ZXh0Ll9fd29ya2VyX2NvbmZpZ19fO1xyXG4gICAgICAgICAgICBpZiAoY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmlzQ2xpZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VjcmV0OiBTZWNyZXRSZXN1bHQ8V29ya2VyRXZlbnRzLkNhbGxhYmxlPiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50U2VjcmV0OiBjb250ZXh0Ll9fd29ya2VyX2NvbmZpZ19fLmNsaWVudFNlY3JldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogV29ya2VyRXZlbnRzLkNhbGxhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6IHByb3BlcnR5S2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBhcmdzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWNyZXQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbE1ldGhvZC5jYWxsKGNvbnRleHQsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsTWV0aG9kLmNhbGwoY29udGV4dCwgLi4uYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xyXG4gICAgfTtcclxufVxyXG4iXX0=