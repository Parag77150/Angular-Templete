import { WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';
import 'reflect-metadata';
/**
 * Allows the decorated worker property to be accessed from the `WorkerClient.get()` and `WorkerClient.set()` methods
 * @Serialized Functions will not be copied and circular referencing structures will cause errors
 * @param options configurable options defining how the decorated property can be interacted with from a `WorkerClient`
 */
export function Accessable(options) {
    const opts = { get: true, set: true, shallowTransfer: false };
    if (options) {
        opts.get = options.get === false ? false : true;
        opts.set = options.set === false ? false : true;
        opts.shallowTransfer = options.shallowTransfer ? true : false;
    }
    return function (target, propertyKey) {
        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.Accessables, {
            name: propertyKey,
            type: Reflect.getMetadata('design:type', target, propertyKey),
            get: opts.get,
            set: opts.set,
            shallowTransfer: opts.shallowTransfer
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzYWJsZS1kZWNvcmF0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXdlYi13b3JrZXIvIiwic291cmNlcyI6WyJsaWIvYWNjZXNzYWJsZS1kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBc0IsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRixPQUFPLGtCQUFrQixDQUFDO0FBd0IxQjs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxPQUF3QjtJQUUvQyxNQUFNLElBQUksR0FBbUIsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQzlFLElBQUksT0FBTyxFQUFFO1FBQ1QsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDaEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDaEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztLQUNqRTtJQUVELE9BQU8sVUFBVSxNQUFXLEVBQUUsV0FBbUI7UUFDN0MsV0FBVyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLFdBQVcsRUFBc0I7WUFDOUYsSUFBSSxFQUFFLFdBQVc7WUFDakIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUM7WUFDN0QsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlO1NBQ3hDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztBQUVOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXb3JrZXJVdGlscywgQWNjZXNzYWJsZU1ldGFEYXRhLCBXb3JrZXJBbm5vdGF0aW9ucyB9IGZyb20gJ2FuZ3VsYXItd2ViLXdvcmtlci9jb21tb24nO1xyXG5pbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xyXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyYWJsZSBvcHRpb25zIGZvciB0aGUgYEBBY2Nlc3NhYmxlKClgIGRlY29yYXRvciwgZGVmaW5pbmcgaG93IHRoZSBkZWNvcmF0ZWQgcHJvcGVydHkgY2FuIGJlIGludGVyYWN0ZWQgd2l0aCBmcm9tIGEgYFdvcmtlckNsaWVudGAuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFjY2Vzc2FibGVPcHRzIHtcclxuICAgIC8qKlxyXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBkZWNvcmF0ZWQgcHJvcGVydHkgY2FuIGJlIHJldHJpZXZlZCBieSBhIGBXb3JrZXJDbGllbnRgIHdpdGggaXRzIGBnZXQoKWAgbWV0aG9kXHJcbiAgICAgKiBAZGVmYXVsdHZhbHVlIHRydWVcclxuICAgICAqL1xyXG4gICAgZ2V0PzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBkZWNvcmF0ZWQgcHJvcGVydHkgY2FuIGJlIHNldCBieSBhIGBXb3JrZXJDbGllbnRgIHdpdGggaXRzIGBzZXQoKWAgbWV0aG9kXHJcbiAgICAgKiBAZGVmYXVsdHZhbHVlIHRydWVcclxuICAgICAqL1xyXG4gICAgc2V0PzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGUgZGVjb3JhdG9yZWQgcHJvcGVydHkncyBwcm90b3R5cGUgaXMgdHJhbnNmZXJlZCBhZnRlciBpdCBoYXMgYmVlbiBzZXJpYWxpemVkIGFuZCB1bnNlcmlhbGl6ZWQuXHJcbiAgICAgKiBAZGVmYXVsdHZhbHVlIGZhbHNlXHJcbiAgICAgKiBARXhwZXJpbWVudGFsIGhhcyBsaW1pdGF0aW9uc1xyXG4gICAgICovXHJcbiAgICBzaGFsbG93VHJhbnNmZXI/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQWxsb3dzIHRoZSBkZWNvcmF0ZWQgd29ya2VyIHByb3BlcnR5IHRvIGJlIGFjY2Vzc2VkIGZyb20gdGhlIGBXb3JrZXJDbGllbnQuZ2V0KClgIGFuZCBgV29ya2VyQ2xpZW50LnNldCgpYCBtZXRob2RzXHJcbiAqIEBTZXJpYWxpemVkIEZ1bmN0aW9ucyB3aWxsIG5vdCBiZSBjb3BpZWQgYW5kIGNpcmN1bGFyIHJlZmVyZW5jaW5nIHN0cnVjdHVyZXMgd2lsbCBjYXVzZSBlcnJvcnNcclxuICogQHBhcmFtIG9wdGlvbnMgY29uZmlndXJhYmxlIG9wdGlvbnMgZGVmaW5pbmcgaG93IHRoZSBkZWNvcmF0ZWQgcHJvcGVydHkgY2FuIGJlIGludGVyYWN0ZWQgd2l0aCBmcm9tIGEgYFdvcmtlckNsaWVudGBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBBY2Nlc3NhYmxlKG9wdGlvbnM/OiBBY2Nlc3NhYmxlT3B0cykge1xyXG5cclxuICAgIGNvbnN0IG9wdHM6IEFjY2Vzc2FibGVPcHRzID0geyBnZXQ6IHRydWUsIHNldDogdHJ1ZSwgc2hhbGxvd1RyYW5zZmVyOiBmYWxzZSB9O1xyXG4gICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICBvcHRzLmdldCA9IG9wdGlvbnMuZ2V0ID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICBvcHRzLnNldCA9IG9wdGlvbnMuc2V0ID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICBvcHRzLnNoYWxsb3dUcmFuc2ZlciA9IG9wdGlvbnMuc2hhbGxvd1RyYW5zZmVyID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcclxuICAgICAgICBXb3JrZXJVdGlscy5wdXNoQW5ub3RhdGlvbih0YXJnZXQuY29uc3RydWN0b3IsIFdvcmtlckFubm90YXRpb25zLkFjY2Vzc2FibGVzLCA8QWNjZXNzYWJsZU1ldGFEYXRhPntcclxuICAgICAgICAgICAgbmFtZTogcHJvcGVydHlLZXksXHJcbiAgICAgICAgICAgIHR5cGU6IFJlZmxlY3QuZ2V0TWV0YWRhdGEoJ2Rlc2lnbjp0eXBlJywgdGFyZ2V0LCBwcm9wZXJ0eUtleSksXHJcbiAgICAgICAgICAgIGdldDogb3B0cy5nZXQsXHJcbiAgICAgICAgICAgIHNldDogb3B0cy5zZXQsXHJcbiAgICAgICAgICAgIHNoYWxsb3dUcmFuc2Zlcjogb3B0cy5zaGFsbG93VHJhbnNmZXJcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG59XHJcblxyXG4iXX0=