import { WorkerAnnotations } from './annotations';
/**
 * A set of static utility functions for creating and retrieving worker annotations
 */
export class WorkerUtils {
    /**
     * Creates or replaces a worker annotation
     * @param cls Class or object that the annotations will be attached to
     * @param propertyKey name of the annotated property
     * @param value the value of the annotation
     */
    static setAnnotation(cls, propertyKey, value) {
        if (cls.hasOwnProperty(WorkerAnnotations.Annotation)) {
            cls[WorkerAnnotations.Annotation][propertyKey] = value;
        }
        else {
            Object.defineProperty(cls, WorkerAnnotations.Annotation, {
                value: {}
            });
            WorkerUtils.setAnnotation(cls, propertyKey, value);
        }
    }
    /**
     * Adds an item to an array for a particular annotation property. If no array exists a new array will be created before the item is added
     * @param cls Class or object that the annotations will be attached to
     * @param propertyKey name of the annotated array
     * @param value the item to add in the array
     */
    static pushAnnotation(cls, propertyKey, value) {
        if (cls.hasOwnProperty(WorkerAnnotations.Annotation)) {
            if (cls[WorkerAnnotations.Annotation].hasOwnProperty(propertyKey)) {
                cls[WorkerAnnotations.Annotation][propertyKey].push(value);
            }
            else {
                cls[WorkerAnnotations.Annotation][propertyKey] = [];
                cls[WorkerAnnotations.Annotation][propertyKey].push(value);
            }
        }
        else {
            Object.defineProperty(cls, WorkerAnnotations.Annotation, {
                value: {}
            });
            WorkerUtils.pushAnnotation(cls, propertyKey, value);
        }
    }
    /**
     * Returns an annotated worker property. Allows for a generic type argument to specify the return type of the annotation
     * @param cls Class or object that the annotations is attached to
     * @param propertyKey name of the annotated array
     * @param ifUndefined the returned value if the annotated property does not exist
     */
    static getAnnotation(cls, propertyKey, ifUndefined = null) {
        if (cls.hasOwnProperty(WorkerAnnotations.Annotation)) {
            return cls[WorkerAnnotations.Annotation][propertyKey];
        }
        else {
            return ifUndefined;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci13ZWItd29ya2VyL2NvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi93b3JrZXItdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUVoRTs7R0FFRztBQUNILE1BQU0sT0FBTyxXQUFXO0lBRXBCOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFRLEVBQUUsV0FBbUIsRUFBRSxLQUFVO1FBQzFELElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNsRCxHQUFHLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQzFEO2FBQU07WUFDSCxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxVQUFVLEVBQUU7Z0JBQ3JELEtBQUssRUFBRSxFQUFFO2FBQ1osQ0FBQyxDQUFDO1lBQ0gsV0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3REO0lBQ0wsQ0FBQztJQUdEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFRLEVBQUUsV0FBbUIsRUFBRSxLQUFVO1FBQzNELElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNsRCxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQy9ELEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDOUQ7aUJBQU07Z0JBQ0gsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDcEQsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM5RDtTQUNKO2FBQU07WUFDSCxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxVQUFVLEVBQUU7Z0JBQ3JELEtBQUssRUFBRSxFQUFFO2FBQ1osQ0FBQyxDQUFDO1lBQ0gsV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLGFBQWEsQ0FBSSxHQUFRLEVBQUUsV0FBbUIsRUFBRSxXQUFXLEdBQUcsSUFBSTtRQUNyRSxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDbEQsT0FBTyxHQUFHLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDekQ7YUFBTTtZQUNILE9BQU8sV0FBVyxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV29ya2VyQW5ub3RhdGlvbnMsIFdvcmtlckNvbmZpZyB9IGZyb20gJy4vYW5ub3RhdGlvbnMnO1xyXG5cclxuLyoqXHJcbiAqIEEgc2V0IG9mIHN0YXRpYyB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgY3JlYXRpbmcgYW5kIHJldHJpZXZpbmcgd29ya2VyIGFubm90YXRpb25zXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV29ya2VyVXRpbHMge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBvciByZXBsYWNlcyBhIHdvcmtlciBhbm5vdGF0aW9uXHJcbiAgICAgKiBAcGFyYW0gY2xzIENsYXNzIG9yIG9iamVjdCB0aGF0IHRoZSBhbm5vdGF0aW9ucyB3aWxsIGJlIGF0dGFjaGVkIHRvXHJcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgbmFtZSBvZiB0aGUgYW5ub3RhdGVkIHByb3BlcnR5XHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIG9mIHRoZSBhbm5vdGF0aW9uXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzZXRBbm5vdGF0aW9uKGNsczogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGNscy5oYXNPd25Qcm9wZXJ0eShXb3JrZXJBbm5vdGF0aW9ucy5Bbm5vdGF0aW9uKSkge1xyXG4gICAgICAgICAgICBjbHNbV29ya2VyQW5ub3RhdGlvbnMuQW5ub3RhdGlvbl1bcHJvcGVydHlLZXldID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNscywgV29ya2VyQW5ub3RhdGlvbnMuQW5ub3RhdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHt9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBXb3JrZXJVdGlscy5zZXRBbm5vdGF0aW9uKGNscywgcHJvcGVydHlLZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhbiBpdGVtIHRvIGFuIGFycmF5IGZvciBhIHBhcnRpY3VsYXIgYW5ub3RhdGlvbiBwcm9wZXJ0eS4gSWYgbm8gYXJyYXkgZXhpc3RzIGEgbmV3IGFycmF5IHdpbGwgYmUgY3JlYXRlZCBiZWZvcmUgdGhlIGl0ZW0gaXMgYWRkZWRcclxuICAgICAqIEBwYXJhbSBjbHMgQ2xhc3Mgb3Igb2JqZWN0IHRoYXQgdGhlIGFubm90YXRpb25zIHdpbGwgYmUgYXR0YWNoZWQgdG9cclxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSBuYW1lIG9mIHRoZSBhbm5vdGF0ZWQgYXJyYXlcclxuICAgICAqIEBwYXJhbSB2YWx1ZSB0aGUgaXRlbSB0byBhZGQgaW4gdGhlIGFycmF5XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBwdXNoQW5ub3RhdGlvbihjbHM6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChjbHMuaGFzT3duUHJvcGVydHkoV29ya2VyQW5ub3RhdGlvbnMuQW5ub3RhdGlvbikpIHtcclxuICAgICAgICAgICAgaWYgKGNsc1tXb3JrZXJBbm5vdGF0aW9ucy5Bbm5vdGF0aW9uXS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eUtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNsc1tXb3JrZXJBbm5vdGF0aW9ucy5Bbm5vdGF0aW9uXVtwcm9wZXJ0eUtleV0ucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbHNbV29ya2VyQW5ub3RhdGlvbnMuQW5ub3RhdGlvbl1bcHJvcGVydHlLZXldID0gW107XHJcbiAgICAgICAgICAgICAgICBjbHNbV29ya2VyQW5ub3RhdGlvbnMuQW5ub3RhdGlvbl1bcHJvcGVydHlLZXldLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNscywgV29ya2VyQW5ub3RhdGlvbnMuQW5ub3RhdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHt9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBXb3JrZXJVdGlscy5wdXNoQW5ub3RhdGlvbihjbHMsIHByb3BlcnR5S2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBhbm5vdGF0ZWQgd29ya2VyIHByb3BlcnR5LiBBbGxvd3MgZm9yIGEgZ2VuZXJpYyB0eXBlIGFyZ3VtZW50IHRvIHNwZWNpZnkgdGhlIHJldHVybiB0eXBlIG9mIHRoZSBhbm5vdGF0aW9uXHJcbiAgICAgKiBAcGFyYW0gY2xzIENsYXNzIG9yIG9iamVjdCB0aGF0IHRoZSBhbm5vdGF0aW9ucyBpcyBhdHRhY2hlZCB0b1xyXG4gICAgICogQHBhcmFtIHByb3BlcnR5S2V5IG5hbWUgb2YgdGhlIGFubm90YXRlZCBhcnJheVxyXG4gICAgICogQHBhcmFtIGlmVW5kZWZpbmVkIHRoZSByZXR1cm5lZCB2YWx1ZSBpZiB0aGUgYW5ub3RhdGVkIHByb3BlcnR5IGRvZXMgbm90IGV4aXN0XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRBbm5vdGF0aW9uPFQ+KGNsczogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBpZlVuZGVmaW5lZCA9IG51bGwpOiBUIHtcclxuICAgICAgICBpZiAoY2xzLmhhc093blByb3BlcnR5KFdvcmtlckFubm90YXRpb25zLkFubm90YXRpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjbHNbV29ya2VyQW5ub3RhdGlvbnMuQW5ub3RhdGlvbl1bcHJvcGVydHlLZXldO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpZlVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4iXX0=