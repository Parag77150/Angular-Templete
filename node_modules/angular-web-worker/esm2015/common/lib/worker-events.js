/**
 * Numeric enum of worker event types that are sent between a `WorkerClient` and a `WorkerController`
 */
export var WorkerEvents;
(function (WorkerEvents) {
    /**
     * Event type for calling worker methods decorated with `@Callable()`. Triggered in the `WorkerClient.call()` method
     */
    WorkerEvents[WorkerEvents["Callable"] = 1] = "Callable";
    /**
     * Event type for accessing worker properties decorated with `@Accessable()`. Triggered in the `WorkerClient.get()` and `WorkerClient.set()` methods
     */
    WorkerEvents[WorkerEvents["Accessable"] = 2] = "Accessable";
    /**
     * Event type for creating and/or removing subscriptions or observables from RxJS subjects within a worker that are decorated with `@Subscribable()`.
     * Triggered in the `WorkerClient.subscribe()`, `WorkerClient.observe()` and `WorkerClient.unsubscribe()`
     */
    WorkerEvents[WorkerEvents["Observable"] = 3] = "Observable";
    /**
     * Event type for observables that are triggered within the worker and delivered to a `WorkerClient` which occurs after a client has subscribed to, or observed a worker subject.
     * This differs from the other events types as it is one-way communication and therefore is not triggered by a request but rather observables in the worker
     */
    WorkerEvents[WorkerEvents["ObservableMessage"] = 4] = "ObservableMessage";
    /**
     * Event type when the worker script is created in the browser which triggers the `onWorkerInit` life-cycle hook if implemented
     */
    WorkerEvents[WorkerEvents["Init"] = 5] = "Init";
})(WorkerEvents || (WorkerEvents = {}));
/**
  * The event type when a `WorkerResponseEvent` response is sent to a client after being triggered by an obvservable in the worker
  */
export var WorkerObservableMessageTypes;
(function (WorkerObservableMessageTypes) {
    WorkerObservableMessageTypes[WorkerObservableMessageTypes["Next"] = 1] = "Next";
    WorkerObservableMessageTypes[WorkerObservableMessageTypes["Error"] = 2] = "Error";
    WorkerObservableMessageTypes[WorkerObservableMessageTypes["Complete"] = 3] = "Complete";
})(WorkerObservableMessageTypes || (WorkerObservableMessageTypes = {}));
//# sourceMappingURL=data:application/json;base64,