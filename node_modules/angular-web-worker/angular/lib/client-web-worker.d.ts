import { WebWorkerType } from 'angular-web-worker/common';
/**
 * Used to mock the behaviour of the native `Worker` class when a `WorkerClient` is set to run in the app and not in the worker script.
 * Controls the flow of messages to and from a `WorkerClient` and a `WorkerController`
 */
export declare class ClientWebWorker<T> implements Partial<Worker> {
    private isTestClient;
    /**
     * Handles execution of code in a worker
     */
    private controller;
    /**
     * Interface for message bus provided into a `WorkerController` allowing the communication mechanism to be interchanged between in-app, and native worker
     * communication mechansims
     */
    private messageBus;
    /**
     * Creates a new instance of a `ClientWebWorker`
     * @param workerType the worker class
     * @param isTestClient whether the instance is used for testing which will then mock serialization
     */
    constructor(workerType: WebWorkerType<T>, isTestClient: boolean);
    /**
     * Returns instance of worker class
     */
    readonly workerInstance: T;
    /**
     * Message listener for a `WorkerClient`
     */
    onmessage(ev: MessageEvent): void;
    /**
     * Sends messages triggered from a `WorkerClient` to a `WorkerController`
     */
    postMessage(resp: any): void;
    /**
     * Unsubscribes from all subscriptions in the `WorkerController` and then destroys the controller
     */
    terminate(): void;
    /**
     * Used for testing to mock the serialization that occurs when native the postMessage or onmessage are used to communicate with a worker script
     * @param obj object to be serialised
     */
    private serialize;
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    onerror(err: any): void;
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    addEventListener(): void;
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    removeEventListener(): void;
    /**
     * Ensures class conforms to the native `Worker` class
     * @NotImplemented
     */
    dispatchEvent(evt: Event): boolean;
}
