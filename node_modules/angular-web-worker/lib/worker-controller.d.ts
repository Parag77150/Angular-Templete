import { WebWorkerType, WorkerRequestEvent, WorkerEvents, WorkerResponseEvent, WorkerObservableMessage, WorkerMessageBus } from 'angular-web-worker/common';
/**
 * Handles communication to and from a `WorkerClient` and triggers work with the worker class.
 */
export declare class WorkerController<T> {
    private workerClass;
    private messageBus;
    /**
     * Instance of the worker class
     */
    private worker;
    /**
     * Dictionary of subscriptions to RxJS subjects within the worker
     */
    private subscriptions;
    /**
     * Creates a new `WorkerController`
     * @param workerClass the worker class,
     * @param postMessageFn the worker postMessage function passed into constuctor allowing this to be mocked when running within the app (not the worker script)
     * @param onMessageFn the worker onmessage event function passed into constructor allowing this to be mocked when running within the app (not the worker script)
     */
    constructor(workerClass: WebWorkerType<any>, messageBus: WorkerMessageBus);
    /**
     * Returns instance of worker class
     */
    readonly workerInstance: T;
    /**
     * Creates the event listeners to correctly handle and respond to messages recieved from a `WorkerClient`
     */
    private registerEvents;
    /**
     * A utility function to create a new `WorkerResponseEvent` from the details provided by the `WorkerRequestEvent`, as well as the result to be returned
     * @param type The type of worker event
     * @param request The request that the response relates to
     * @param result data to return with the response
     */
    private response;
    /**
     * A utility function to create a new error in the form of a `WorkerResponseEvent` from the details provided by the `WorkerRequestEvent`, as well as the error to be returned
     * @param type The type of worker event
     * @param request The request that the error relates to
     * @param result the error to be returned
     */
    private error;
    /**
     * A utility function as the replacer for the `JSON.stringify()` function to make the native browser `Error` class serializable to JSON
     */
    private replaceErrors;
    /**
     * Handles `WorkerEvents.Init` requests from a client by calling the `onWorkerInit` hook if implemented and only responding once the hook has been completed, regardless of whether it is
     * async or not
     * @param request request recieved from the `WorkerClient`
     */
    handleInit(request: WorkerRequestEvent<WorkerEvents.Init>): Promise<void>;
    /**
     * Handles `WorkerEvents.Callable` requests from a client by calling the targeted method and responding with the method's return value
     * @param request request recieved from the `WorkerClient`
     */
    handleCallable(request: WorkerRequestEvent<WorkerEvents.Callable>): Promise<void>;
    /**
     * Transfers the prototype of any function arguments decorated with `@ShallowTransfer()` which have been serialized and recieved from a `WorkerEvents.Callable` request.
     *  This occurs before the arguments are used to call the worker function.
     * @param request request recieved from the `WorkerClient`
     * @param args array of function arguments
     */
    applyShallowTransferToCallableArgs(request: WorkerRequestEvent<WorkerEvents.Callable>, args: any[]): any[];
    /**
     * Handles `WorkerEvents.Accessable` requests from a client by either setting the target property of the worker or responding with the target property's value
     * @param request request recieved from the `WorkerClient`
     */
    handleAccessable(request: WorkerRequestEvent<WorkerEvents.Accessable>): void;
    /**
     * Handles `WorkerEvents.Subscribable` requests from a client by creating a new subscription to the targeted observable which will send messages to the client each time
     * an event is triggered by the observable. The function may also unsubscribe from a subscription depending on the details of the request
     * @param request request recieved from the `WorkerClient`
     */
    handleSubscription(request: WorkerRequestEvent<WorkerEvents.Observable>): void;
    /**
     * Creates a new subscription to a worker observable and adds it to the `subscriptions` dictionary. The subscriptions will send messages to the client each time
     *  and event is triggered by the observable
     * @param request request recieved from the `WorkerClient`
     */
    createSubscription(request: WorkerRequestEvent<WorkerEvents.Observable>): void;
    /**
     * Removes a subscription from the `subscriptions` dictionary, unsubscribing before it is deleted
     * @param subscriptionKey key in dictionary
     */
    removeSubscription(subscriptionKey: string): void;
    /**
     * Unsubscribes from all subscriptions
     */
    removeAllSubscriptions(): void;
    /**
     * A wrapper function around the `postMessage()` method allowing serialization errors to be caught and sent to the client as a `WorkerResponseEvent`.
     * Only used when the response is triggered by a request, which is not the case when the event type is `WorkerEvents.ObservableMessage`.
     * @param response reponse to send to the client
     */
    postMessage<EventType extends number>(response: WorkerResponseEvent<EventType>): void;
    /**
     * A wrapper function around the `postMessage()` method allowing serialization errors to be caught and sent to the client as a `WorkerResponseEvent`.
     * Only used when the response type is `WorkerEvents.ObservableMessage` which requires a different implementation to the `WorkerController.postMessage` wrapper as it
     * is one-way communication which is not triggered by a request
     */
    postSubscriptionMessage(response: WorkerResponseEvent<WorkerObservableMessage>): void;
}
