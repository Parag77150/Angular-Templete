import 'reflect-metadata';
/**
 * Configurable options for the `@Accessable()` decorator, defining how the decorated property can be interacted with from a `WorkerClient`.
 */
export interface AccessableOpts {
    /**
     * Determines whether the decorated property can be retrieved by a `WorkerClient` with its `get()` method
     * @defaultvalue true
     */
    get?: boolean;
    /**
     * Determines whether the decorated property can be set by a `WorkerClient` with its `set()` method
     * @defaultvalue true
     */
    set?: boolean;
    /**
     * Whether the decoratored property's prototype is transfered after it has been serialized and unserialized.
     * @defaultvalue false
     * @Experimental has limitations
     */
    shallowTransfer?: boolean;
}
/**
 * Allows the decorated worker property to be accessed from the `WorkerClient.get()` and `WorkerClient.set()` methods
 * @Serialized Functions will not be copied and circular referencing structures will cause errors
 * @param options configurable options defining how the decorated property can be interacted with from a `WorkerClient`
 */
export declare function Accessable(options?: AccessableOpts): (target: any, propertyKey: string) => void;
