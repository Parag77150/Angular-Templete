import 'reflect-metadata';
/**
 * Allows the decorated worker property to be subscribed to, or observed through the `WorkerClient.subscribe()` and `WorkerClient.observe()` methods.
 *
 * Can only be used on multicasted RxJS observables being a `Subject`,  `BehaviorSubject`, `ReplaySubject` or `AsyncSubject`.
 * @Serialized When data is transferred through `Subject.next()`, functions will not be copied and circular referencing structures will cause errors
 */
export declare function Subscribable(): <T, Tkey extends { [K in keyof T]: T[K] extends import("rxjs").Subject<any> | import("rxjs").BehaviorSubject<any> | import("rxjs").AsyncSubject<any> | import("rxjs").ReplaySubject<any> ? K : never; }[keyof T]>(target: T, propertyKey: Tkey) => void;
