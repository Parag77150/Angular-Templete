import 'reflect-metadata';
/**
 * Configurable options for the `@Callable()` decorator, defining how the decorated method is called from a `WorkerClient`.
 */
export interface CallableOpts {
    /**
     * Whether the prototype of the value returned by the decorated method is transfered after it has been serialized and unserialized when brought back to the `WorkerClient`
     * @defaultvalue false
     * @Experimental has limitations
     */
    shallowTransfer?: boolean;
}
/**
 * Allows the decorated worker method to be called, and its value returned, from the `WorkerClient.call()` method.
 * Can be used on both asynchronous and synchronous methods.
 * @Serialized Functions will not be copied and circular referencing structures will cause errors. This applies to both the function arguments and the value returned by the function
 * @param options Configurable options defining how the decorated method is called from a `WorkerClient`
 */
export declare function Callable(options?: CallableOpts): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
