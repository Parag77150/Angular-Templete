{"version":3,"file":"angular-web-worker.js","sources":["ng://angular-web-worker/lib/web-worker-decorator.ts","ng://angular-web-worker/lib/worker-controller.ts","ng://angular-web-worker/lib/bootstrap-worker.ts","ng://angular-web-worker/lib/callable-decorator.ts","ng://angular-web-worker/lib/accessable-decorator.ts","ng://angular-web-worker/lib/subscribable-decorator.ts","ng://angular-web-worker/lib/shallow-transfer-decorator.ts"],"sourcesContent":["import { WorkerUtils, WorkerConfig, WorkerAnnotations, AccessableMetaData, SecretResult, WorkerEvents, SubscribableMetaData } from 'angular-web-worker/common';\r\n\r\n/*\r\n* Collection of factory functions for the factory as attached to a single object which allows for testing of imported function\r\n*/\r\nexport interface WorkerFactoryFunctionsDict {\r\n    /*\r\n    * Attaches a worker configuration to an instance of a worker class\r\n    * @param instance instance of the worker class\r\n    * @param config configuration\r\n    */\r\n    setWorkerConfig: (instance: any, config: WorkerConfig) => void;\r\n    /*\r\n    * Adds a get wrapper to all properties decorated with `@Accessable()` which returns a `SecretResult` if the class instance is a client, otherwise it will use the default behaviour\r\n    * @param instance instance of the worker class\r\n    */\r\n    configureAccessables: (instance: any) => void;\r\n    /**\r\n     * Adds a get wrapper to all properties decorated with `@Subscribable()` which returns a `SecretResult` if the class instance is a client, otherwise it will use the default behaviour\r\n     * @param instance instance of the worker class\r\n     */\r\n    configureSubscribables: (instance: any) => void;\r\n}\r\n\r\nexport const WorkerFactoryFunctions: WorkerFactoryFunctionsDict = {\r\n    /*\r\n     * Attaches a worker configuration to an instance of a worker class\r\n     * @param instance instance of the worker class\r\n     * @param config configuration\r\n     */\r\n    setWorkerConfig: (instance: any, config: WorkerConfig) => {\r\n        Object.defineProperty(instance, WorkerAnnotations.Config, {\r\n            get: function () {\r\n                return config;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n    },\r\n\r\n    configureAccessables: (instance: any) => {\r\n        const accessables: AccessableMetaData[] = WorkerUtils.getAnnotation(instance.__proto__.constructor, WorkerAnnotations.Accessables, []);\r\n\r\n        if (accessables) {\r\n            accessables.forEach((item) => {\r\n                let _val = instance[item.name];\r\n                const getter = function () {\r\n                    const config: WorkerConfig = this.__worker_config__;\r\n                    if (config) {\r\n                        if (config.isClient) {\r\n                            const secret: SecretResult<WorkerEvents.Accessable> = {\r\n                                clientSecret: config.clientSecret,\r\n                                type: WorkerEvents.Accessable,\r\n                                propertyName: item.name,\r\n                                body: {\r\n                                    get: item.get,\r\n                                    set: item.set\r\n                                }\r\n                            };\r\n                            return secret;\r\n                        } else {\r\n                            return _val;\r\n                        }\r\n                    } else {\r\n                        return _val;\r\n                    }\r\n                };\r\n\r\n                const setter = newVal => {\r\n                    _val = newVal;\r\n                };\r\n\r\n                delete instance[item.name];\r\n                Object.defineProperty(instance, item.name, {\r\n                    get: getter,\r\n                    set: setter,\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    configureSubscribables: (instance: any) => {\r\n\r\n        const observables = WorkerUtils.getAnnotation<SubscribableMetaData[]>(instance.__proto__.constructor, WorkerAnnotations.Observables, []);\r\n\r\n        if (observables) {\r\n            observables.forEach((item) => {\r\n                let _val = instance[item.name];\r\n\r\n                const getter = function () {\r\n                    const config: WorkerConfig = this.__worker_config__;\r\n                    if (config) {\r\n                        if (config.isClient) {\r\n                            const secret: SecretResult<WorkerEvents.Observable> = {\r\n                                clientSecret: config.clientSecret,\r\n                                type: WorkerEvents.Observable,\r\n                                propertyName: item.name,\r\n                                body: null\r\n                            };\r\n                            return secret;\r\n                        } else {\r\n                            return _val;\r\n                        }\r\n                    } else {\r\n                        return _val;\r\n                    }\r\n                };\r\n\r\n                const setter = newVal => {\r\n                    _val = newVal;\r\n                };\r\n\r\n                delete instance[item.name];\r\n                Object.defineProperty(instance, item.name, {\r\n                    get: getter,\r\n                    set: setter,\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n            });\r\n        }\r\n\r\n    }\r\n};\r\n\r\n/**\r\n * Class decorator allowing the class to be bootstrapped into a web worker script, and allowing communication with a `WorkerClient`\r\n */\r\nexport function AngularWebWorker() {\r\n\r\n    return function (target: any) {\r\n        WorkerUtils.setAnnotation(target, WorkerAnnotations.IsWorker, true);\r\n        WorkerUtils.setAnnotation(target, WorkerAnnotations.Factory, function create(config: WorkerConfig) {\r\n            const instance = new target();\r\n            WorkerFactoryFunctions.setWorkerConfig(instance, config);\r\n            WorkerFactoryFunctions.configureAccessables(instance);\r\n            WorkerFactoryFunctions.configureSubscribables(instance);\r\n            return instance;\r\n        });\r\n\r\n    };\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { Subject, Subscription } from 'rxjs';\r\nimport {\r\n    WebWorkerType, WorkerRequestEvent, WorkerEvent, WorkerEvents, WorkerAnnotations,\r\n    WorkerUtils, WorkerResponseEvent, ShallowTransferParamMetaData,\r\n    AccessableMetaData, WorkerObservableMessage, WorkerObservableMessageTypes, CallableMetaData, WorkerMessageBus\r\n} from 'angular-web-worker/common';\r\n\r\n/**\r\n * Handles communication to and from a `WorkerClient` and triggers work with the worker class.\r\n */\r\nexport class WorkerController<T> {\r\n\r\n    /**\r\n     * Instance of the worker class\r\n     */\r\n    private worker: any;\r\n    /**\r\n     * Dictionary of subscriptions to RxJS subjects within the worker\r\n     */\r\n    private subscriptions: { [id: string]: Subscription };\r\n\r\n    /**\r\n     * Creates a new `WorkerController`\r\n     * @param workerClass the worker class,\r\n     * @param postMessageFn the worker postMessage function passed into constuctor allowing this to be mocked when running within the app (not the worker script)\r\n     * @param onMessageFn the worker onmessage event function passed into constructor allowing this to be mocked when running within the app (not the worker script)\r\n     */\r\n    constructor(private workerClass: WebWorkerType<any>, private messageBus: WorkerMessageBus) {\r\n        try {\r\n            this.worker = WorkerUtils.getAnnotation<Function>(workerClass, WorkerAnnotations.Factory)({\r\n                isClient: false\r\n            });\r\n            this.subscriptions = {};\r\n            this.registerEvents();\r\n        } catch (e) { }\r\n    }\r\n\r\n    /**\r\n     * Returns instance of worker class\r\n     */\r\n    get workerInstance(): T {\r\n        return this.worker;\r\n    }\r\n\r\n    /**\r\n     * Creates the event listeners to correctly handle and respond to messages recieved from a `WorkerClient`\r\n     */\r\n    private registerEvents() {\r\n        this.messageBus.onmessage = (ev: WorkerEvent<WorkerRequestEvent<any>>) => {\r\n            switch (ev.data.type) {\r\n                case WorkerEvents.Callable:\r\n                    this.handleCallable(ev.data);\r\n                    break;\r\n                case WorkerEvents.Accessable:\r\n                    this.handleAccessable(ev.data);\r\n                    break;\r\n                case WorkerEvents.Observable:\r\n                    this.handleSubscription(ev.data);\r\n                    break;\r\n                case WorkerEvents.Init:\r\n                    this.handleInit(ev.data);\r\n                    break;\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A utility function to create a new `WorkerResponseEvent` from the details provided by the `WorkerRequestEvent`, as well as the result to be returned\r\n     * @param type The type of worker event\r\n     * @param request The request that the response relates to\r\n     * @param result data to return with the response\r\n     */\r\n    private response<EventType extends number>(\r\n        type: EventType,\r\n        request: WorkerRequestEvent<EventType>,\r\n        result: any\r\n    ): WorkerResponseEvent<EventType> {\r\n        return {\r\n            type: type,\r\n            isError: false,\r\n            requestSecret: request.requestSecret,\r\n            propertyName: request.propertyName,\r\n            result: result\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A utility function to create a new error in the form of a `WorkerResponseEvent` from the details provided by the `WorkerRequestEvent`, as well as the error to be returned\r\n     * @param type The type of worker event\r\n     * @param request The request that the error relates to\r\n     * @param result the error to be returned\r\n     */\r\n    private error<EventType extends number>(\r\n        type: number,\r\n        request: WorkerRequestEvent<EventType>,\r\n        error: any\r\n    ): WorkerResponseEvent<EventType> {\r\n        return {\r\n            type: type,\r\n            isError: true,\r\n            requestSecret: request.requestSecret,\r\n            propertyName: request.propertyName,\r\n            error: JSON.stringify(error, this.replaceErrors),\r\n            result: null\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A utility function as the replacer for the `JSON.stringify()` function to make the native browser `Error` class serializable to JSON\r\n     */\r\n    private replaceErrors(key: string, value: any) {\r\n        if (value instanceof Error) {\r\n            const error = {};\r\n            // tslint:disable-next-line: no-shadowed-variable\r\n            Object.getOwnPropertyNames(value).forEach(function (key) {\r\n                error[key] = value[key];\r\n            });\r\n            return error;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Handles `WorkerEvents.Init` requests from a client by calling the `onWorkerInit` hook if implemented and only responding once the hook has been completed, regardless of whether it is\r\n     * async or not\r\n     * @param request request recieved from the `WorkerClient`\r\n     */\r\n    async handleInit(request: WorkerRequestEvent<WorkerEvents.Init>) {\r\n        if (this.worker['onWorkerInit']) {\r\n            try {\r\n                const result = this.worker['onWorkerInit']();\r\n                let isPromise = false;\r\n                if (result) {\r\n                    isPromise = result.__proto__.constructor === Promise;\r\n                }\r\n                if (isPromise) {\r\n                    result.then(() => {\r\n                        this.postMessage(this.response(WorkerEvents.Init, request, null));\r\n                    }).catch((err: any) => {\r\n                        this.postMessage(this.error(WorkerEvents.Init, request, err));\r\n                    });\r\n                } else {\r\n                    this.postMessage(this.response(WorkerEvents.Init, request, null));\r\n                }\r\n            } catch (e) {\r\n                this.postMessage(this.error(WorkerEvents.Init, request, null));\r\n            }\r\n        } else {\r\n            this.postMessage(this.response(WorkerEvents.Init, request, null));\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Handles `WorkerEvents.Callable` requests from a client by calling the targeted method and responding with the method's return value\r\n     * @param request request recieved from the `WorkerClient`\r\n     */\r\n    async handleCallable(request: WorkerRequestEvent<WorkerEvents.Callable>) {\r\n        let response: WorkerResponseEvent<any>;\r\n        try {\r\n            request.body.arguments = this.applyShallowTransferToCallableArgs(request, request.body.arguments);\r\n            const result = await this.worker[request.propertyName](...request.body.arguments);\r\n\r\n            response = this.response(WorkerEvents.Callable, request, result);\r\n        } catch (e) {\r\n            response = this.error(WorkerEvents.Callable, request, e);\r\n        } finally {\r\n            this.postMessage(response);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Transfers the prototype of any function arguments decorated with `@ShallowTransfer()` which have been serialized and recieved from a `WorkerEvents.Callable` request.\r\n     *  This occurs before the arguments are used to call the worker function.\r\n     * @param request request recieved from the `WorkerClient`\r\n     * @param args array of function arguments\r\n     */\r\n    applyShallowTransferToCallableArgs(\r\n        request: WorkerRequestEvent<WorkerEvents.Callable>,\r\n        args: any[]\r\n    ): any[] {\r\n\r\n        const metaData = WorkerUtils.getAnnotation<ShallowTransferParamMetaData[]>(this.workerClass, WorkerAnnotations.ShallowTransferArgs, []);\r\n\r\n        if (metaData) {\r\n            const shallowTransferMeta = metaData.filter(x => x.name === request.propertyName);\r\n            for (let i = 0; i < args.length; i++) {\r\n                const meta = shallowTransferMeta.filter(x => x.argIndex === i)[0];\r\n                if (meta) {\r\n                    if (meta.type && args[i]) {\r\n                        args[i].__proto__ = meta.type.prototype;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return args;\r\n    }\r\n\r\n    /**\r\n     * Handles `WorkerEvents.Accessable` requests from a client by either setting the target property of the worker or responding with the target property's value\r\n     * @param request request recieved from the `WorkerClient`\r\n     */\r\n    handleAccessable(request: WorkerRequestEvent<WorkerEvents.Accessable>) {\r\n        let response: WorkerResponseEvent<any>;\r\n        try {\r\n            const metaData = WorkerUtils.getAnnotation<AccessableMetaData[]>(this.workerClass, 'accessables', []).filter(x => x.name === request.propertyName)[0];\r\n            if (request.body.isGet) {\r\n                response = this.response(WorkerEvents.Accessable, request, this.worker[request.propertyName]);\r\n            } else {\r\n                this.worker[request.propertyName] = request.body.value;\r\n                if (metaData.shallowTransfer) {\r\n                    if (metaData.type && this.worker[request.propertyName]) {\r\n                        this.worker[request.propertyName].__proto__ = metaData.type.prototype;\r\n                    }\r\n                }\r\n                response = this.response(WorkerEvents.Accessable, request, null);\r\n            }\r\n        } catch (e) {\r\n            response = this.error(WorkerEvents.Accessable, request, e);\r\n        } finally {\r\n            this.postMessage(response);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles `WorkerEvents.Subscribable` requests from a client by creating a new subscription to the targeted observable which will send messages to the client each time\r\n     * an event is triggered by the observable. The function may also unsubscribe from a subscription depending on the details of the request\r\n     * @param request request recieved from the `WorkerClient`\r\n     */\r\n    handleSubscription(request: WorkerRequestEvent<WorkerEvents.Observable>) {\r\n        let response: WorkerResponseEvent<WorkerEvents.Observable>;\r\n\r\n        if (!request.body.isUnsubscribe) {\r\n            try {\r\n                this.createSubscription(request);\r\n                response = this.response(WorkerEvents.Observable, request, request.body.subscriptionKey);\r\n            } catch (e) {\r\n                this.removeSubscription(request.body.subscriptionKey);\r\n                response = this.error(WorkerEvents.Observable, request, e);\r\n            } finally {\r\n                this.postMessage(response);\r\n            }\r\n        } else {\r\n            try {\r\n                this.removeSubscription(request.body.subscriptionKey);\r\n                response = this.response(WorkerEvents.Observable, request, null);\r\n            } catch (e) {\r\n                response = this.error(WorkerEvents.Observable, request, e);\r\n            } finally {\r\n                this.postMessage(response);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new subscription to a worker observable and adds it to the `subscriptions` dictionary. The subscriptions will send messages to the client each time\r\n     *  and event is triggered by the observable\r\n     * @param request request recieved from the `WorkerClient`\r\n     */\r\n    createSubscription(request: WorkerRequestEvent<WorkerEvents.Observable>): void {\r\n\r\n        this.removeSubscription(request.body.subscriptionKey);\r\n\r\n        this.subscriptions[request.body.subscriptionKey] = (<Subject<any>>this.worker[request.propertyName]).subscribe(\r\n            (val) => {\r\n                const response: WorkerResponseEvent<WorkerObservableMessage> = {\r\n                    type: WorkerEvents.ObservableMessage,\r\n                    propertyName: request.propertyName,\r\n                    isError: false,\r\n                    requestSecret: null,\r\n                    result: {\r\n                        key: request.body.subscriptionKey,\r\n                        type: WorkerObservableMessageTypes.Next,\r\n                        value: val\r\n                    }\r\n                };\r\n                this.postSubscriptionMessage(response);\r\n            }, err => {\r\n                const response: WorkerResponseEvent<WorkerObservableMessage> = {\r\n                    type: WorkerEvents.ObservableMessage,\r\n                    propertyName: request.propertyName,\r\n                    isError: true,\r\n                    requestSecret: null,\r\n                    result: {\r\n                        key: request.body.subscriptionKey,\r\n                        type: WorkerObservableMessageTypes.Error,\r\n                        error: JSON.parse(JSON.stringify(err, this.replaceErrors))\r\n                    }\r\n                };\r\n                this.postSubscriptionMessage(response);\r\n            }, () => {\r\n                const response: WorkerResponseEvent<WorkerObservableMessage> = {\r\n                    type: WorkerEvents.ObservableMessage,\r\n                    propertyName: request.propertyName,\r\n                    isError: false,\r\n                    requestSecret: null,\r\n                    result: {\r\n                        key: request.body.subscriptionKey,\r\n                        type: WorkerObservableMessageTypes.Complete,\r\n                    }\r\n                };\r\n                this.postSubscriptionMessage(response);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Removes a subscription from the `subscriptions` dictionary, unsubscribing before it is deleted\r\n     * @param subscriptionKey key in dictionary\r\n     */\r\n    removeSubscription(subscriptionKey: string) {\r\n        if (this.subscriptions[subscriptionKey]) {\r\n            this.subscriptions[subscriptionKey].unsubscribe();\r\n        }\r\n        delete this.subscriptions[subscriptionKey];\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes from all subscriptions\r\n     */\r\n    removeAllSubscriptions(): void {\r\n        for (const key in this.subscriptions) {\r\n            if (this.subscriptions[key]) {\r\n                this.subscriptions[key].unsubscribe();\r\n                delete this.subscriptions[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A wrapper function around the `postMessage()` method allowing serialization errors to be caught and sent to the client as a `WorkerResponseEvent`.\r\n     * Only used when the response is triggered by a request, which is not the case when the event type is `WorkerEvents.ObservableMessage`.\r\n     * @param response reponse to send to the client\r\n     */\r\n    postMessage<EventType extends number>(\r\n        response: WorkerResponseEvent<EventType>,\r\n    ): void {\r\n        try {\r\n            this.messageBus.postMessage(response);\r\n        } catch (e) {\r\n            const errorResponse: WorkerResponseEvent<EventType> = {\r\n                type: response.type,\r\n                isError: true,\r\n                requestSecret: response.requestSecret,\r\n                propertyName: response.propertyName,\r\n                error: JSON.parse(JSON.stringify(new Error('Unable to serialize response from worker to client'), this.replaceErrors)),\r\n                result: null\r\n            };\r\n            this.messageBus.postMessage(errorResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A wrapper function around the `postMessage()` method allowing serialization errors to be caught and sent to the client as a `WorkerResponseEvent`.\r\n     * Only used when the response type is `WorkerEvents.ObservableMessage` which requires a different implementation to the `WorkerController.postMessage` wrapper as it\r\n     * is one-way communication which is not triggered by a request\r\n     */\r\n    postSubscriptionMessage(\r\n        response: WorkerResponseEvent<WorkerObservableMessage>,\r\n    ): void {\r\n        try {\r\n            this.messageBus.postMessage(response);\r\n        } catch (e) {\r\n            const errorResponse: WorkerResponseEvent<WorkerObservableMessage> = {\r\n                type: response.type,\r\n                isError: true,\r\n                requestSecret: response.requestSecret,\r\n                propertyName: response.propertyName,\r\n                result: {\r\n                    key: response.result.key,\r\n                    type: WorkerObservableMessageTypes.Error,\r\n                    error: JSON.parse(JSON.stringify(new Error('Unable to serialize subscribable response from worker to client'), this.replaceErrors))\r\n                },\r\n            };\r\n            this.messageBus.postMessage(errorResponse);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","\r\nimport { WorkerController } from './worker-controller';\r\nimport { WebWorkerType, WorkerMessageBus } from 'angular-web-worker/common';\r\n\r\n/**\r\n * Bootstraps the worker class when a new worker script is created in the browser. The class must be decorated with `@AngularWebWorker()`\r\n * @param worker worker class to bootstrap\r\n */\r\nexport function bootstrapWorker<T>(worker: WebWorkerType<T>) {\r\n\r\n    const messageBus: WorkerMessageBus = {\r\n        onmessage: (ev: MessageEvent) => {\r\n        },\r\n        postMessage: (msg: Response) => {\r\n            (postMessage as Function)(msg);\r\n        }\r\n    };\r\n    const workerController = new WorkerController<T>(worker, messageBus);\r\n\r\n    onmessage = (ev: MessageEvent) => {\r\n        messageBus.onmessage(ev);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { CallableMetaData, WorkerConfig, WorkerEvents, SecretResult, WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';\r\n\r\n/**\r\n * Configurable options for the `@Callable()` decorator, defining how the decorated method is called from a `WorkerClient`.\r\n */\r\nexport interface CallableOpts {\r\n    /**\r\n     * Whether the prototype of the value returned by the decorated method is transfered after it has been serialized and unserialized when brought back to the `WorkerClient`\r\n     * @defaultvalue false\r\n     * @Experimental has limitations\r\n     */\r\n    shallowTransfer?: boolean;\r\n}\r\n\r\n/**\r\n * Allows the decorated worker method to be called, and its value returned, from the `WorkerClient.call()` method.\r\n * Can be used on both asynchronous and synchronous methods.\r\n * @Serialized Functions will not be copied and circular referencing structures will cause errors. This applies to both the function arguments and the value returned by the function\r\n * @param options Configurable options defining how the decorated method is called from a `WorkerClient`\r\n */\r\nexport function Callable(options?: CallableOpts) {\r\n\r\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n\r\n        const opts = { shallowTransfer: false };\r\n        if (options) {\r\n            opts.shallowTransfer = options.shallowTransfer ? true : false;\r\n        }\r\n\r\n        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.Callables, <CallableMetaData>{\r\n            name: propertyKey,\r\n            shallowTransfer: opts.shallowTransfer,\r\n            returnType: Reflect.getMetadata('design:returntype', target, propertyKey)\r\n        });\r\n\r\n        const originalMethod = descriptor.value;\r\n        descriptor.value = function () {\r\n            const context = this;\r\n            const args = Array.prototype.slice.call(arguments);\r\n            const config: WorkerConfig = context.__worker_config__;\r\n            if (config) {\r\n                if (config.isClient) {\r\n                    const secret: SecretResult<WorkerEvents.Callable> = {\r\n                        clientSecret: context.__worker_config__.clientSecret,\r\n                        type: WorkerEvents.Callable,\r\n                        propertyName: propertyKey,\r\n                        body: {\r\n                            args: args\r\n                        }\r\n                    };\r\n                    return secret;\r\n                } else {\r\n                    return originalMethod.call(context, ...args);\r\n                }\r\n            } else {\r\n                return originalMethod.call(context, ...args);\r\n            }\r\n        };\r\n        return descriptor;\r\n    };\r\n}\r\n","import { WorkerUtils, AccessableMetaData, WorkerAnnotations } from 'angular-web-worker/common';\r\nimport 'reflect-metadata';\r\n\r\n/**\r\n * Configurable options for the `@Accessable()` decorator, defining how the decorated property can be interacted with from a `WorkerClient`.\r\n */\r\nexport interface AccessableOpts {\r\n    /**\r\n     * Determines whether the decorated property can be retrieved by a `WorkerClient` with its `get()` method\r\n     * @defaultvalue true\r\n     */\r\n    get?: boolean;\r\n    /**\r\n     * Determines whether the decorated property can be set by a `WorkerClient` with its `set()` method\r\n     * @defaultvalue true\r\n     */\r\n    set?: boolean;\r\n    /**\r\n     * Whether the decoratored property's prototype is transfered after it has been serialized and unserialized.\r\n     * @defaultvalue false\r\n     * @Experimental has limitations\r\n     */\r\n    shallowTransfer?: boolean;\r\n}\r\n\r\n/**\r\n * Allows the decorated worker property to be accessed from the `WorkerClient.get()` and `WorkerClient.set()` methods\r\n * @Serialized Functions will not be copied and circular referencing structures will cause errors\r\n * @param options configurable options defining how the decorated property can be interacted with from a `WorkerClient`\r\n */\r\nexport function Accessable(options?: AccessableOpts) {\r\n\r\n    const opts: AccessableOpts = { get: true, set: true, shallowTransfer: false };\r\n    if (options) {\r\n        opts.get = options.get === false ? false : true;\r\n        opts.set = options.set === false ? false : true;\r\n        opts.shallowTransfer = options.shallowTransfer ? true : false;\r\n    }\r\n\r\n    return function (target: any, propertyKey: string) {\r\n        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.Accessables, <AccessableMetaData>{\r\n            name: propertyKey,\r\n            type: Reflect.getMetadata('design:type', target, propertyKey),\r\n            get: opts.get,\r\n            set: opts.set,\r\n            shallowTransfer: opts.shallowTransfer\r\n        });\r\n    };\r\n\r\n}\r\n\r\n","import { WorkerUtils, ObservablesOnly, SubscribableMetaData, WorkerAnnotations, WorkerConfig, SecretResult, WorkerEvents } from 'angular-web-worker/common';\r\nimport 'reflect-metadata';\r\n\r\n/**\r\n * Allows the decorated worker property to be subscribed to, or observed through the `WorkerClient.subscribe()` and `WorkerClient.observe()` methods.\r\n *\r\n * Can only be used on multicasted RxJS observables being a `Subject`,  `BehaviorSubject`, `ReplaySubject` or `AsyncSubject`.\r\n * @Serialized When data is transferred through `Subject.next()`, functions will not be copied and circular referencing structures will cause errors\r\n */\r\nexport function Subscribable() {\r\n    return function <T, Tkey extends keyof ObservablesOnly<T>>(target: T, propertyKey: Tkey) {\r\n        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.Observables, <SubscribableMetaData>{\r\n            name: propertyKey,\r\n            type: Reflect.getMetadata('design:type', target, <string>propertyKey)\r\n        });\r\n    };\r\n}\r\n","import { WorkerUtils, ShallowTransferParamMetaData, WorkerAnnotations } from 'angular-web-worker/common';\r\n\r\n/**\r\n * Transfers the decorated argument's prototype when it is serialized and unserialized when the method is called from `WorkerClient.call()`. This will only have an effect if\r\n * the method is decorated with `@Callable()`\r\n * @Experimental has limitations\r\n */\r\nexport function ShallowTransfer() {\r\n    return function (target: Object, propertyKey: string | symbol, parameterIndex: number) {\r\n        const argTypes: any[] = Reflect.getMetadata('design:paramtypes', target, propertyKey);\r\n        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.ShallowTransferArgs, <ShallowTransferParamMetaData>{\r\n            name: propertyKey,\r\n            type: argTypes[parameterIndex],\r\n            argIndex: parameterIndex\r\n        });\r\n    };\r\n}\r\n"],"names":[],"mappings":"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"}