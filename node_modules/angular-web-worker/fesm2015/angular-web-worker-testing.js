import { WorkerClient, WorkerManager, WorkerModule } from 'angular-web-worker/angular';
import { WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';

/**
 * **Used for Testing**
 *
 * Testing implementation a `WorkerClient`, which does not run in a worker script but mocks the serialization that occurs when messages are transfered to
 * and from a worker. Also adds a public `workerInstance` to test and spy on the worker class
 *
 */
class WorkerTestingClient extends WorkerClient {
    constructor(definition) {
        super(definition, true, true);
    }
    /**
     * Exposed instance of the private worker instance to allow testing & spying
     */
    get workerInstance() {
        if (this.isConnected) {
            return this['workerRef'].workerInstance;
        }
        else {
            throw new Error('Cannot access worker instance until the connect method has been called');
        }
    }
}
/**
 * Creates a new `TestWorkerClient`
 * @param workerClass worker class
 */
function createTestClient(workerClass) {
    if (!WorkerUtils.getAnnotation(workerClass, WorkerAnnotations.IsWorker)) {
        throw new Error('createTestClient: the provided class must be decorated with @AngularWebWorker()');
    }
    else {
        return new WorkerTestingClient({ worker: workerClass, initFn: () => null });
    }
}

/**
 * **Used for Testing**
 *
 * Testing implementation of the `WorkerManager` service, overriding the `createClient()` method to create a testable instance of the
 * `WorkerClient`
 *
 */
class WorkerTestingManager extends WorkerManager {
    constructor(workers) {
        super(workers.map(x => {
            return { worker: x, initFn: () => null };
        }));
        this.workers = workers;
        if (!workers) {
            throw new Error('the workers argument for the TestWorkerManager constructor cannot be undefined or null');
        }
    }
    createClient(workerType, runInApp = false) {
        const definition = this.workers.filter(p => p === workerType)[0];
        if (definition) {
            return new WorkerTestingClient({ worker: workerType, initFn: () => null });
        }
        else {
            throw new Error('WorkerManager: all web workers must be registered in the createTestManager function');
        }
    }
}
/**
 * Creates a new `TestWorkerManager`
 * @param workers array of workers that can be created through the `createClient` method
 */
function createTestManager(workers) {
    return new WorkerTestingManager(workers);
}

/**
 * **Used for Testing**
 *
 * Testing implementation a `WorkerModule`, which provides a `WorkerTestingManager` that creates testable worker client that dos not run in a worker script but mocks the serialization that occurs when messages are transfered to
 * and from a worker.
 */
class WorkerTestingModule {
    static forWorkers(workers) {
        workers.forEach((wkr) => {
            if (!WorkerUtils.getAnnotation(wkr, WorkerAnnotations.IsWorker)) {
                throw new Error('WorkerModule: one or more of the provided workers has not been decorated with the @AngularWebWorker decorator');
            }
        });
        return {
            ngModule: WorkerModule,
            providers: [
                { provide: WorkerManager, useValue: new WorkerTestingManager(workers) }
            ]
        };
    }
}

export { WorkerTestingClient, WorkerTestingModule, createTestClient, createTestManager, WorkerTestingManager as Éµa };
//# sourceMappingURL=angular-web-worker-testing.js.map
