{"version":3,"file":"angular-web-worker-testing.js","sources":["ng://angular-web-worker/testing/lib/worker-testing-client.ts","ng://angular-web-worker/testing/lib/worker-testing-manager.ts","ng://angular-web-worker/testing/lib/worker-testing-module.ts"],"sourcesContent":["import { WorkerClient, WorkerDefinition, ClientWebWorker } from 'angular-web-worker/angular';\r\nimport { WebWorkerType, WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';\r\n\r\n/**\r\n * **Used for Testing**\r\n *\r\n * Testing implementation a `WorkerClient`, which does not run in a worker script but mocks the serialization that occurs when messages are transfered to\r\n * and from a worker. Also adds a public `workerInstance` to test and spy on the worker class\r\n *\r\n */\r\nexport class WorkerTestingClient<T> extends WorkerClient<T> {\r\n\r\n    constructor(definition: WorkerDefinition) {\r\n        super(definition, true, true);\r\n    }\r\n\r\n    /**\r\n     * Exposed instance of the private worker instance to allow testing & spying\r\n     */\r\n    get workerInstance(): T {\r\n        if (this.isConnected) {\r\n            return (this['workerRef'] as ClientWebWorker<T>).workerInstance;\r\n        } else {\r\n            throw new Error('Cannot access worker instance until the connect method has been called');\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a new `TestWorkerClient`\r\n * @param workerClass worker class\r\n */\r\nexport function createTestClient<T>(workerClass: WebWorkerType<T>): WorkerTestingClient<T> {\r\n    if (!WorkerUtils.getAnnotation(workerClass, WorkerAnnotations.IsWorker)) {\r\n        throw new Error('createTestClient: the provided class must be decorated with @AngularWebWorker()');\r\n    } else {\r\n        return new WorkerTestingClient({ worker: workerClass, initFn: () => null });\r\n    }\r\n}\r\n","import { WorkerManager, WorkerClient } from 'angular-web-worker/angular';\r\nimport { WebWorkerType } from 'angular-web-worker/common';\r\nimport { WorkerTestingClient } from './worker-testing-client';\r\n\r\n/**\r\n * **Used for Testing**\r\n *\r\n * Testing implementation of the `WorkerManager` service, overriding the `createClient()` method to create a testable instance of the\r\n * `WorkerClient`\r\n *\r\n */\r\nexport class WorkerTestingManager extends WorkerManager {\r\n\r\n    constructor(private workers: WebWorkerType<any>[]) {\r\n\r\n        super(workers.map(x => {\r\n            return { worker: x, initFn: () => null };\r\n        }));\r\n\r\n        if (!workers) {\r\n            throw new Error('the workers argument for the TestWorkerManager constructor cannot be undefined or null');\r\n        }\r\n    }\r\n\r\n    createClient<T>(workerType: WebWorkerType<T>, runInApp: boolean = false): WorkerClient<T> {\r\n        const definition = this.workers.filter(p => p === workerType)[0];\r\n        if (definition) {\r\n            return new WorkerTestingClient<T>({ worker: workerType, initFn: () => null });\r\n        } else {\r\n            throw new Error('WorkerManager: all web workers must be registered in the createTestManager function');\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Creates a new `TestWorkerManager`\r\n * @param workers array of workers that can be created through the `createClient` method\r\n */\r\nexport function createTestManager(workers: WebWorkerType<any>[]): WorkerTestingManager {\r\n    return new WorkerTestingManager(workers);\r\n}\r\n","import { WorkerModule, WorkerManager } from 'angular-web-worker/angular';\r\nimport { WebWorkerType, WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';\r\nimport { WorkerTestingManager } from './worker-testing-manager';\r\n\r\n/**\r\n * **Used for Testing**\r\n *\r\n * Testing implementation a `WorkerModule`, which provides a `WorkerTestingManager` that creates testable worker client that dos not run in a worker script but mocks the serialization that occurs when messages are transfered to\r\n * and from a worker.\r\n */\r\nexport class WorkerTestingModule {\r\n\r\n    static forWorkers(workers: WebWorkerType<any>[]) {\r\n\r\n        workers.forEach((wkr) => {\r\n            if (!WorkerUtils.getAnnotation(wkr, WorkerAnnotations.IsWorker)) {\r\n                throw new Error('WorkerModule: one or more of the provided workers has not been decorated with the @AngularWebWorker decorator');\r\n            }\r\n        });\r\n\r\n        return {\r\n            ngModule: WorkerModule,\r\n            providers: [\r\n                { provide: WorkerManager, useValue: new WorkerTestingManager(workers) }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AAGA;;;;;;;AAOA,MAAa,mBAAuB,SAAQ,YAAe;IAEvD,YAAY,UAA4B;QACpC,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KACjC;;;;IAKD,IAAI,cAAc;QACd,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,OAAQ,IAAI,CAAC,WAAW,CAAwB,CAAC,cAAc,CAAC;SACnE;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;SAC7F;KACJ;CACJ;;;;;AAMD,SAAgB,gBAAgB,CAAI,WAA6B;IAC7D,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,EAAE,iBAAiB,CAAC,QAAQ,CAAC,EAAE;QACrE,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;KACtG;SAAM;QACH,OAAO,IAAI,mBAAmB,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,IAAI,EAAE,CAAC,CAAC;KAC/E;CACJ;;AClCD;;;;;;;AAOA,MAAa,oBAAqB,SAAQ,aAAa;IAEnD,YAAoB,OAA6B;QAE7C,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACf,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,IAAI,EAAE,CAAC;SAC5C,CAAC,CAAC,CAAC;QAJY,YAAO,GAAP,OAAO,CAAsB;QAM7C,IAAI,CAAC,OAAO,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,wFAAwF,CAAC,CAAC;SAC7G;KACJ;IAED,YAAY,CAAI,UAA4B,EAAE,WAAoB,KAAK;QACnE,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACjE,IAAI,UAAU,EAAE;YACZ,OAAO,IAAI,mBAAmB,CAAI,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,IAAI,EAAE,CAAC,CAAC;SACjF;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,qFAAqF,CAAC,CAAC;SAC1G;KACJ;CAEJ;;;;;AAMD,SAAgB,iBAAiB,CAAC,OAA6B;IAC3D,OAAO,IAAI,oBAAoB,CAAC,OAAO,CAAC,CAAC;CAC5C;;ACrCD;;;;;;AAMA,MAAa,mBAAmB;IAE5B,OAAO,UAAU,CAAC,OAA6B;QAE3C,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG;YAChB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,QAAQ,CAAC,EAAE;gBAC7D,MAAM,IAAI,KAAK,CAAC,+GAA+G,CAAC,CAAC;aACpI;SACJ,CAAC,CAAC;QAEH,OAAO;YACH,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE;gBACP,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,IAAI,oBAAoB,CAAC,OAAO,CAAC,EAAE;aAC1E;SACJ,CAAC;KACL;CACJ;;;;"}