(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('angular-web-worker/angular'), require('angular-web-worker/common')) :
    typeof define === 'function' && define.amd ? define('angular-web-worker/testing', ['exports', 'angular-web-worker/angular', 'angular-web-worker/common'], factory) :
    (global = global || self, factory((global['angular-web-worker'] = global['angular-web-worker'] || {}, global['angular-web-worker'].testing = {}), global['angular-web-worker'].angular, global['angular-web-worker'].common));
}(this, function (exports, angular, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * **Used for Testing**
     *
     * Testing implementation a `WorkerClient`, which does not run in a worker script but mocks the serialization that occurs when messages are transfered to
     * and from a worker. Also adds a public `workerInstance` to test and spy on the worker class
     *
     */
    var WorkerTestingClient = /** @class */ (function (_super) {
        __extends(WorkerTestingClient, _super);
        function WorkerTestingClient(definition) {
            return _super.call(this, definition, true, true) || this;
        }
        Object.defineProperty(WorkerTestingClient.prototype, "workerInstance", {
            /**
             * Exposed instance of the private worker instance to allow testing & spying
             */
            get: function () {
                if (this.isConnected) {
                    return this['workerRef'].workerInstance;
                }
                else {
                    throw new Error('Cannot access worker instance until the connect method has been called');
                }
            },
            enumerable: true,
            configurable: true
        });
        return WorkerTestingClient;
    }(angular.WorkerClient));
    /**
     * Creates a new `TestWorkerClient`
     * @param workerClass worker class
     */
    function createTestClient(workerClass) {
        if (!common.WorkerUtils.getAnnotation(workerClass, common.WorkerAnnotations.IsWorker)) {
            throw new Error('createTestClient: the provided class must be decorated with @AngularWebWorker()');
        }
        else {
            return new WorkerTestingClient({ worker: workerClass, initFn: function () { return null; } });
        }
    }

    /**
     * **Used for Testing**
     *
     * Testing implementation of the `WorkerManager` service, overriding the `createClient()` method to create a testable instance of the
     * `WorkerClient`
     *
     */
    var WorkerTestingManager = /** @class */ (function (_super) {
        __extends(WorkerTestingManager, _super);
        function WorkerTestingManager(workers) {
            var _this = _super.call(this, workers.map(function (x) {
                return { worker: x, initFn: function () { return null; } };
            })) || this;
            _this.workers = workers;
            if (!workers) {
                throw new Error('the workers argument for the TestWorkerManager constructor cannot be undefined or null');
            }
            return _this;
        }
        WorkerTestingManager.prototype.createClient = function (workerType, runInApp) {
            var definition = this.workers.filter(function (p) { return p === workerType; })[0];
            if (definition) {
                return new WorkerTestingClient({ worker: workerType, initFn: function () { return null; } });
            }
            else {
                throw new Error('WorkerManager: all web workers must be registered in the createTestManager function');
            }
        };
        return WorkerTestingManager;
    }(angular.WorkerManager));
    /**
     * Creates a new `TestWorkerManager`
     * @param workers array of workers that can be created through the `createClient` method
     */
    function createTestManager(workers) {
        return new WorkerTestingManager(workers);
    }

    /**
     * **Used for Testing**
     *
     * Testing implementation a `WorkerModule`, which provides a `WorkerTestingManager` that creates testable worker client that dos not run in a worker script but mocks the serialization that occurs when messages are transfered to
     * and from a worker.
     */
    var WorkerTestingModule = /** @class */ (function () {
        function WorkerTestingModule() {
        }
        WorkerTestingModule.forWorkers = function (workers) {
            workers.forEach(function (wkr) {
                if (!common.WorkerUtils.getAnnotation(wkr, common.WorkerAnnotations.IsWorker)) {
                    throw new Error('WorkerModule: one or more of the provided workers has not been decorated with the @AngularWebWorker decorator');
                }
            });
            return {
                ngModule: angular.WorkerModule,
                providers: [
                    { provide: angular.WorkerManager, useValue: new WorkerTestingManager(workers) }
                ]
            };
        };
        return WorkerTestingModule;
    }());

    exports.WorkerTestingClient = WorkerTestingClient;
    exports.WorkerTestingModule = WorkerTestingModule;
    exports.createTestClient = createTestClient;
    exports.createTestManager = createTestManager;
    exports.Éµa = WorkerTestingManager;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=angular-web-worker-testing.umd.js.map
