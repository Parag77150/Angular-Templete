{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://angular-web-worker/lib/web-worker-decorator.ts","ng://angular-web-worker/lib/worker-controller.ts","ng://angular-web-worker/lib/accessable-decorator.ts","ng://angular-web-worker/lib/callable-decorator.ts","ng://angular-web-worker/lib/shallow-transfer-decorator.ts","ng://angular-web-worker/lib/subscribable-decorator.ts","ng://angular-web-worker/lib/bootstrap-worker.ts"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","__read","o","m","r","i","ar","error","__spread","arguments","concat","instance","config","Object","defineProperty","WorkerAnnotations","Config","get","enumerable","configurable","ɵ1","accessables","WorkerUtils","getAnnotation","__proto__","constructor","Accessables","forEach","item","_val","name","__worker_config__","isClient","clientSecret","type","WorkerEvents","Accessable","propertyName","set","newVal","ɵ2","observables","Observables","Observable","WorkerFactoryFunctions","setWorkerConfig","ɵ0","configureAccessables","configureSubscribables","WorkerController","workerClass","messageBus","worker","Factory","subscriptions","registerEvents","prototype","_this","onmessage","ev","data","Callable","handleCallable","handleAccessable","handleSubscription","Init","handleInit","response","request","isError","requestSecret","JSON","stringify","replaceErrors","key","Error","error_1","getOwnPropertyNames","isPromise","postMessage","catch","err","applyShallowTransferToCallableArgs","_a","_b","e_1","args","metaData","ShallowTransferArgs","shallowTransferMeta","filter","x","meta","argIndex","isGet","shallowTransfer","isUnsubscribe","removeSubscription","subscriptionKey","createSubscription","subscribe","val","ObservableMessage","WorkerObservableMessageTypes","Next","postSubscriptionMessage","parse","Complete","unsubscribe","removeAllSubscriptions","errorResponse","options","opts","target","propertyKey","pushAnnotation","Reflect","getMetadata","setAnnotation","IsWorker","descriptor","Callables","returnType","originalMethod","context","Array","slice","secret","parameterIndex","argTypes","msg"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { WorkerUtils, WorkerConfig, WorkerAnnotations, AccessableMetaData, SecretResult, WorkerEvents, SubscribableMetaData } from 'angular-web-worker/common';\r\n\r\n/*\r\n* Collection of factory functions for the factory as attached to a single object which allows for testing of imported function\r\n*/\r\nexport interface WorkerFactoryFunctionsDict {\r\n    /*\r\n    * Attaches a worker configuration to an instance of a worker class\r\n    * @param instance instance of the worker class\r\n    * @param config configuration\r\n    */\r\n    setWorkerConfig: (instance: any, config: WorkerConfig) => void;\r\n    /*\r\n    * Adds a get wrapper to all properties decorated with `@Accessable()` which returns a `SecretResult` if the class instance is a client, otherwise it will use the default behaviour\r\n    * @param instance instance of the worker class\r\n    */\r\n    configureAccessables: (instance: any) => void;\r\n    /**\r\n     * Adds a get wrapper to all properties decorated with `@Subscribable()` which returns a `SecretResult` if the class instance is a client, otherwise it will use the default behaviour\r\n     * @param instance instance of the worker class\r\n     */\r\n    configureSubscribables: (instance: any) => void;\r\n}\r\n\r\nexport const WorkerFactoryFunctions: WorkerFactoryFunctionsDict = {\r\n    /*\r\n     * Attaches a worker configuration to an instance of a worker class\r\n     * @param instance instance of the worker class\r\n     * @param config configuration\r\n     */\r\n    setWorkerConfig: (instance: any, config: WorkerConfig) => {\r\n        Object.defineProperty(instance, WorkerAnnotations.Config, {\r\n            get: function () {\r\n                return config;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n    },\r\n\r\n    configureAccessables: (instance: any) => {\r\n        const accessables: AccessableMetaData[] = WorkerUtils.getAnnotation(instance.__proto__.constructor, WorkerAnnotations.Accessables, []);\r\n\r\n        if (accessables) {\r\n            accessables.forEach((item) => {\r\n                let _val = instance[item.name];\r\n                const getter = function () {\r\n                    const config: WorkerConfig = this.__worker_config__;\r\n                    if (config) {\r\n                        if (config.isClient) {\r\n                            const secret: SecretResult<WorkerEvents.Accessable> = {\r\n                                clientSecret: config.clientSecret,\r\n                                type: WorkerEvents.Accessable,\r\n                                propertyName: item.name,\r\n                                body: {\r\n                                    get: item.get,\r\n                                    set: item.set\r\n                                }\r\n                            };\r\n                            return secret;\r\n                        } else {\r\n                            return _val;\r\n                        }\r\n                    } else {\r\n                        return _val;\r\n                    }\r\n                };\r\n\r\n                const setter = newVal => {\r\n                    _val = newVal;\r\n                };\r\n\r\n                delete instance[item.name];\r\n                Object.defineProperty(instance, item.name, {\r\n                    get: getter,\r\n                    set: setter,\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    configureSubscribables: (instance: any) => {\r\n\r\n        const observables = WorkerUtils.getAnnotation<SubscribableMetaData[]>(instance.__proto__.constructor, WorkerAnnotations.Observables, []);\r\n\r\n        if (observables) {\r\n            observables.forEach((item) => {\r\n                let _val = instance[item.name];\r\n\r\n                const getter = function () {\r\n                    const config: WorkerConfig = this.__worker_config__;\r\n                    if (config) {\r\n                        if (config.isClient) {\r\n                            const secret: SecretResult<WorkerEvents.Observable> = {\r\n                                clientSecret: config.clientSecret,\r\n                                type: WorkerEvents.Observable,\r\n                                propertyName: item.name,\r\n                                body: null\r\n                            };\r\n                            return secret;\r\n                        } else {\r\n                            return _val;\r\n                        }\r\n                    } else {\r\n                        return _val;\r\n                    }\r\n                };\r\n\r\n                const setter = newVal => {\r\n                    _val = newVal;\r\n                };\r\n\r\n                delete instance[item.name];\r\n                Object.defineProperty(instance, item.name, {\r\n                    get: getter,\r\n                    set: setter,\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n            });\r\n        }\r\n\r\n    }\r\n};\r\n\r\n/**\r\n * Class decorator allowing the class to be bootstrapped into a web worker script, and allowing communication with a `WorkerClient`\r\n */\r\nexport function AngularWebWorker() {\r\n\r\n    return function (target: any) {\r\n        WorkerUtils.setAnnotation(target, WorkerAnnotations.IsWorker, true);\r\n        WorkerUtils.setAnnotation(target, WorkerAnnotations.Factory, function create(config: WorkerConfig) {\r\n            const instance = new target();\r\n            WorkerFactoryFunctions.setWorkerConfig(instance, config);\r\n            WorkerFactoryFunctions.configureAccessables(instance);\r\n            WorkerFactoryFunctions.configureSubscribables(instance);\r\n            return instance;\r\n        });\r\n\r\n    };\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { Subject, Subscription } from 'rxjs';\r\nimport {\r\n    WebWorkerType, WorkerRequestEvent, WorkerEvent, WorkerEvents, WorkerAnnotations,\r\n    WorkerUtils, WorkerResponseEvent, ShallowTransferParamMetaData,\r\n    AccessableMetaData, WorkerObservableMessage, WorkerObservableMessageTypes, CallableMetaData, WorkerMessageBus\r\n} from 'angular-web-worker/common';\r\n\r\n/**\r\n * Handles communication to and from a `WorkerClient` and triggers work with the worker class.\r\n */\r\nexport class WorkerController<T> {\r\n\r\n    /**\r\n     * Instance of the worker class\r\n     */\r\n    private worker: any;\r\n    /**\r\n     * Dictionary of subscriptions to RxJS subjects within the worker\r\n     */\r\n    private subscriptions: { [id: string]: Subscription };\r\n\r\n    /**\r\n     * Creates a new `WorkerController`\r\n     * @param workerClass the worker class,\r\n     * @param postMessageFn the worker postMessage function passed into constuctor allowing this to be mocked when running within the app (not the worker script)\r\n     * @param onMessageFn the worker onmessage event function passed into constructor allowing this to be mocked when running within the app (not the worker script)\r\n     */\r\n    constructor(private workerClass: WebWorkerType<any>, private messageBus: WorkerMessageBus) {\r\n        try {\r\n            this.worker = WorkerUtils.getAnnotation<Function>(workerClass, WorkerAnnotations.Factory)({\r\n                isClient: false\r\n            });\r\n            this.subscriptions = {};\r\n            this.registerEvents();\r\n        } catch (e) { }\r\n    }\r\n\r\n    /**\r\n     * Returns instance of worker class\r\n     */\r\n    get workerInstance(): T {\r\n        return this.worker;\r\n    }\r\n\r\n    /**\r\n     * Creates the event listeners to correctly handle and respond to messages recieved from a `WorkerClient`\r\n     */\r\n    private registerEvents() {\r\n        this.messageBus.onmessage = (ev: WorkerEvent<WorkerRequestEvent<any>>) => {\r\n            switch (ev.data.type) {\r\n                case WorkerEvents.Callable:\r\n                    this.handleCallable(ev.data);\r\n                    break;\r\n                case WorkerEvents.Accessable:\r\n                    this.handleAccessable(ev.data);\r\n                    break;\r\n                case WorkerEvents.Observable:\r\n                    this.handleSubscription(ev.data);\r\n                    break;\r\n                case WorkerEvents.Init:\r\n                    this.handleInit(ev.data);\r\n                    break;\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A utility function to create a new `WorkerResponseEvent` from the details provided by the `WorkerRequestEvent`, as well as the result to be returned\r\n     * @param type The type of worker event\r\n     * @param request The request that the response relates to\r\n     * @param result data to return with the response\r\n     */\r\n    private response<EventType extends number>(\r\n        type: EventType,\r\n        request: WorkerRequestEvent<EventType>,\r\n        result: any\r\n    ): WorkerResponseEvent<EventType> {\r\n        return {\r\n            type: type,\r\n            isError: false,\r\n            requestSecret: request.requestSecret,\r\n            propertyName: request.propertyName,\r\n            result: result\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A utility function to create a new error in the form of a `WorkerResponseEvent` from the details provided by the `WorkerRequestEvent`, as well as the error to be returned\r\n     * @param type The type of worker event\r\n     * @param request The request that the error relates to\r\n     * @param result the error to be returned\r\n     */\r\n    private error<EventType extends number>(\r\n        type: number,\r\n        request: WorkerRequestEvent<EventType>,\r\n        error: any\r\n    ): WorkerResponseEvent<EventType> {\r\n        return {\r\n            type: type,\r\n            isError: true,\r\n            requestSecret: request.requestSecret,\r\n            propertyName: request.propertyName,\r\n            error: JSON.stringify(error, this.replaceErrors),\r\n            result: null\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A utility function as the replacer for the `JSON.stringify()` function to make the native browser `Error` class serializable to JSON\r\n     */\r\n    private replaceErrors(key: string, value: any) {\r\n        if (value instanceof Error) {\r\n            const error = {};\r\n            // tslint:disable-next-line: no-shadowed-variable\r\n            Object.getOwnPropertyNames(value).forEach(function (key) {\r\n                error[key] = value[key];\r\n            });\r\n            return error;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Handles `WorkerEvents.Init` requests from a client by calling the `onWorkerInit` hook if implemented and only responding once the hook has been completed, regardless of whether it is\r\n     * async or not\r\n     * @param request request recieved from the `WorkerClient`\r\n     */\r\n    async handleInit(request: WorkerRequestEvent<WorkerEvents.Init>) {\r\n        if (this.worker['onWorkerInit']) {\r\n            try {\r\n                const result = this.worker['onWorkerInit']();\r\n                let isPromise = false;\r\n                if (result) {\r\n                    isPromise = result.__proto__.constructor === Promise;\r\n                }\r\n                if (isPromise) {\r\n                    result.then(() => {\r\n                        this.postMessage(this.response(WorkerEvents.Init, request, null));\r\n                    }).catch((err: any) => {\r\n                        this.postMessage(this.error(WorkerEvents.Init, request, err));\r\n                    });\r\n                } else {\r\n                    this.postMessage(this.response(WorkerEvents.Init, request, null));\r\n                }\r\n            } catch (e) {\r\n                this.postMessage(this.error(WorkerEvents.Init, request, null));\r\n            }\r\n        } else {\r\n            this.postMessage(this.response(WorkerEvents.Init, request, null));\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Handles `WorkerEvents.Callable` requests from a client by calling the targeted method and responding with the method's return value\r\n     * @param request request recieved from the `WorkerClient`\r\n     */\r\n    async handleCallable(request: WorkerRequestEvent<WorkerEvents.Callable>) {\r\n        let response: WorkerResponseEvent<any>;\r\n        try {\r\n            request.body.arguments = this.applyShallowTransferToCallableArgs(request, request.body.arguments);\r\n            const result = await this.worker[request.propertyName](...request.body.arguments);\r\n\r\n            response = this.response(WorkerEvents.Callable, request, result);\r\n        } catch (e) {\r\n            response = this.error(WorkerEvents.Callable, request, e);\r\n        } finally {\r\n            this.postMessage(response);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Transfers the prototype of any function arguments decorated with `@ShallowTransfer()` which have been serialized and recieved from a `WorkerEvents.Callable` request.\r\n     *  This occurs before the arguments are used to call the worker function.\r\n     * @param request request recieved from the `WorkerClient`\r\n     * @param args array of function arguments\r\n     */\r\n    applyShallowTransferToCallableArgs(\r\n        request: WorkerRequestEvent<WorkerEvents.Callable>,\r\n        args: any[]\r\n    ): any[] {\r\n\r\n        const metaData = WorkerUtils.getAnnotation<ShallowTransferParamMetaData[]>(this.workerClass, WorkerAnnotations.ShallowTransferArgs, []);\r\n\r\n        if (metaData) {\r\n            const shallowTransferMeta = metaData.filter(x => x.name === request.propertyName);\r\n            for (let i = 0; i < args.length; i++) {\r\n                const meta = shallowTransferMeta.filter(x => x.argIndex === i)[0];\r\n                if (meta) {\r\n                    if (meta.type && args[i]) {\r\n                        args[i].__proto__ = meta.type.prototype;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return args;\r\n    }\r\n\r\n    /**\r\n     * Handles `WorkerEvents.Accessable` requests from a client by either setting the target property of the worker or responding with the target property's value\r\n     * @param request request recieved from the `WorkerClient`\r\n     */\r\n    handleAccessable(request: WorkerRequestEvent<WorkerEvents.Accessable>) {\r\n        let response: WorkerResponseEvent<any>;\r\n        try {\r\n            const metaData = WorkerUtils.getAnnotation<AccessableMetaData[]>(this.workerClass, 'accessables', []).filter(x => x.name === request.propertyName)[0];\r\n            if (request.body.isGet) {\r\n                response = this.response(WorkerEvents.Accessable, request, this.worker[request.propertyName]);\r\n            } else {\r\n                this.worker[request.propertyName] = request.body.value;\r\n                if (metaData.shallowTransfer) {\r\n                    if (metaData.type && this.worker[request.propertyName]) {\r\n                        this.worker[request.propertyName].__proto__ = metaData.type.prototype;\r\n                    }\r\n                }\r\n                response = this.response(WorkerEvents.Accessable, request, null);\r\n            }\r\n        } catch (e) {\r\n            response = this.error(WorkerEvents.Accessable, request, e);\r\n        } finally {\r\n            this.postMessage(response);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles `WorkerEvents.Subscribable` requests from a client by creating a new subscription to the targeted observable which will send messages to the client each time\r\n     * an event is triggered by the observable. The function may also unsubscribe from a subscription depending on the details of the request\r\n     * @param request request recieved from the `WorkerClient`\r\n     */\r\n    handleSubscription(request: WorkerRequestEvent<WorkerEvents.Observable>) {\r\n        let response: WorkerResponseEvent<WorkerEvents.Observable>;\r\n\r\n        if (!request.body.isUnsubscribe) {\r\n            try {\r\n                this.createSubscription(request);\r\n                response = this.response(WorkerEvents.Observable, request, request.body.subscriptionKey);\r\n            } catch (e) {\r\n                this.removeSubscription(request.body.subscriptionKey);\r\n                response = this.error(WorkerEvents.Observable, request, e);\r\n            } finally {\r\n                this.postMessage(response);\r\n            }\r\n        } else {\r\n            try {\r\n                this.removeSubscription(request.body.subscriptionKey);\r\n                response = this.response(WorkerEvents.Observable, request, null);\r\n            } catch (e) {\r\n                response = this.error(WorkerEvents.Observable, request, e);\r\n            } finally {\r\n                this.postMessage(response);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new subscription to a worker observable and adds it to the `subscriptions` dictionary. The subscriptions will send messages to the client each time\r\n     *  and event is triggered by the observable\r\n     * @param request request recieved from the `WorkerClient`\r\n     */\r\n    createSubscription(request: WorkerRequestEvent<WorkerEvents.Observable>): void {\r\n\r\n        this.removeSubscription(request.body.subscriptionKey);\r\n\r\n        this.subscriptions[request.body.subscriptionKey] = (<Subject<any>>this.worker[request.propertyName]).subscribe(\r\n            (val) => {\r\n                const response: WorkerResponseEvent<WorkerObservableMessage> = {\r\n                    type: WorkerEvents.ObservableMessage,\r\n                    propertyName: request.propertyName,\r\n                    isError: false,\r\n                    requestSecret: null,\r\n                    result: {\r\n                        key: request.body.subscriptionKey,\r\n                        type: WorkerObservableMessageTypes.Next,\r\n                        value: val\r\n                    }\r\n                };\r\n                this.postSubscriptionMessage(response);\r\n            }, err => {\r\n                const response: WorkerResponseEvent<WorkerObservableMessage> = {\r\n                    type: WorkerEvents.ObservableMessage,\r\n                    propertyName: request.propertyName,\r\n                    isError: true,\r\n                    requestSecret: null,\r\n                    result: {\r\n                        key: request.body.subscriptionKey,\r\n                        type: WorkerObservableMessageTypes.Error,\r\n                        error: JSON.parse(JSON.stringify(err, this.replaceErrors))\r\n                    }\r\n                };\r\n                this.postSubscriptionMessage(response);\r\n            }, () => {\r\n                const response: WorkerResponseEvent<WorkerObservableMessage> = {\r\n                    type: WorkerEvents.ObservableMessage,\r\n                    propertyName: request.propertyName,\r\n                    isError: false,\r\n                    requestSecret: null,\r\n                    result: {\r\n                        key: request.body.subscriptionKey,\r\n                        type: WorkerObservableMessageTypes.Complete,\r\n                    }\r\n                };\r\n                this.postSubscriptionMessage(response);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Removes a subscription from the `subscriptions` dictionary, unsubscribing before it is deleted\r\n     * @param subscriptionKey key in dictionary\r\n     */\r\n    removeSubscription(subscriptionKey: string) {\r\n        if (this.subscriptions[subscriptionKey]) {\r\n            this.subscriptions[subscriptionKey].unsubscribe();\r\n        }\r\n        delete this.subscriptions[subscriptionKey];\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes from all subscriptions\r\n     */\r\n    removeAllSubscriptions(): void {\r\n        for (const key in this.subscriptions) {\r\n            if (this.subscriptions[key]) {\r\n                this.subscriptions[key].unsubscribe();\r\n                delete this.subscriptions[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A wrapper function around the `postMessage()` method allowing serialization errors to be caught and sent to the client as a `WorkerResponseEvent`.\r\n     * Only used when the response is triggered by a request, which is not the case when the event type is `WorkerEvents.ObservableMessage`.\r\n     * @param response reponse to send to the client\r\n     */\r\n    postMessage<EventType extends number>(\r\n        response: WorkerResponseEvent<EventType>,\r\n    ): void {\r\n        try {\r\n            this.messageBus.postMessage(response);\r\n        } catch (e) {\r\n            const errorResponse: WorkerResponseEvent<EventType> = {\r\n                type: response.type,\r\n                isError: true,\r\n                requestSecret: response.requestSecret,\r\n                propertyName: response.propertyName,\r\n                error: JSON.parse(JSON.stringify(new Error('Unable to serialize response from worker to client'), this.replaceErrors)),\r\n                result: null\r\n            };\r\n            this.messageBus.postMessage(errorResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A wrapper function around the `postMessage()` method allowing serialization errors to be caught and sent to the client as a `WorkerResponseEvent`.\r\n     * Only used when the response type is `WorkerEvents.ObservableMessage` which requires a different implementation to the `WorkerController.postMessage` wrapper as it\r\n     * is one-way communication which is not triggered by a request\r\n     */\r\n    postSubscriptionMessage(\r\n        response: WorkerResponseEvent<WorkerObservableMessage>,\r\n    ): void {\r\n        try {\r\n            this.messageBus.postMessage(response);\r\n        } catch (e) {\r\n            const errorResponse: WorkerResponseEvent<WorkerObservableMessage> = {\r\n                type: response.type,\r\n                isError: true,\r\n                requestSecret: response.requestSecret,\r\n                propertyName: response.propertyName,\r\n                result: {\r\n                    key: response.result.key,\r\n                    type: WorkerObservableMessageTypes.Error,\r\n                    error: JSON.parse(JSON.stringify(new Error('Unable to serialize subscribable response from worker to client'), this.replaceErrors))\r\n                },\r\n            };\r\n            this.messageBus.postMessage(errorResponse);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { WorkerUtils, AccessableMetaData, WorkerAnnotations } from 'angular-web-worker/common';\r\nimport 'reflect-metadata';\r\n\r\n/**\r\n * Configurable options for the `@Accessable()` decorator, defining how the decorated property can be interacted with from a `WorkerClient`.\r\n */\r\nexport interface AccessableOpts {\r\n    /**\r\n     * Determines whether the decorated property can be retrieved by a `WorkerClient` with its `get()` method\r\n     * @defaultvalue true\r\n     */\r\n    get?: boolean;\r\n    /**\r\n     * Determines whether the decorated property can be set by a `WorkerClient` with its `set()` method\r\n     * @defaultvalue true\r\n     */\r\n    set?: boolean;\r\n    /**\r\n     * Whether the decoratored property's prototype is transfered after it has been serialized and unserialized.\r\n     * @defaultvalue false\r\n     * @Experimental has limitations\r\n     */\r\n    shallowTransfer?: boolean;\r\n}\r\n\r\n/**\r\n * Allows the decorated worker property to be accessed from the `WorkerClient.get()` and `WorkerClient.set()` methods\r\n * @Serialized Functions will not be copied and circular referencing structures will cause errors\r\n * @param options configurable options defining how the decorated property can be interacted with from a `WorkerClient`\r\n */\r\nexport function Accessable(options?: AccessableOpts) {\r\n\r\n    const opts: AccessableOpts = { get: true, set: true, shallowTransfer: false };\r\n    if (options) {\r\n        opts.get = options.get === false ? false : true;\r\n        opts.set = options.set === false ? false : true;\r\n        opts.shallowTransfer = options.shallowTransfer ? true : false;\r\n    }\r\n\r\n    return function (target: any, propertyKey: string) {\r\n        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.Accessables, <AccessableMetaData>{\r\n            name: propertyKey,\r\n            type: Reflect.getMetadata('design:type', target, propertyKey),\r\n            get: opts.get,\r\n            set: opts.set,\r\n            shallowTransfer: opts.shallowTransfer\r\n        });\r\n    };\r\n\r\n}\r\n\r\n","import 'reflect-metadata';\r\nimport { CallableMetaData, WorkerConfig, WorkerEvents, SecretResult, WorkerUtils, WorkerAnnotations } from 'angular-web-worker/common';\r\n\r\n/**\r\n * Configurable options for the `@Callable()` decorator, defining how the decorated method is called from a `WorkerClient`.\r\n */\r\nexport interface CallableOpts {\r\n    /**\r\n     * Whether the prototype of the value returned by the decorated method is transfered after it has been serialized and unserialized when brought back to the `WorkerClient`\r\n     * @defaultvalue false\r\n     * @Experimental has limitations\r\n     */\r\n    shallowTransfer?: boolean;\r\n}\r\n\r\n/**\r\n * Allows the decorated worker method to be called, and its value returned, from the `WorkerClient.call()` method.\r\n * Can be used on both asynchronous and synchronous methods.\r\n * @Serialized Functions will not be copied and circular referencing structures will cause errors. This applies to both the function arguments and the value returned by the function\r\n * @param options Configurable options defining how the decorated method is called from a `WorkerClient`\r\n */\r\nexport function Callable(options?: CallableOpts) {\r\n\r\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n\r\n        const opts = { shallowTransfer: false };\r\n        if (options) {\r\n            opts.shallowTransfer = options.shallowTransfer ? true : false;\r\n        }\r\n\r\n        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.Callables, <CallableMetaData>{\r\n            name: propertyKey,\r\n            shallowTransfer: opts.shallowTransfer,\r\n            returnType: Reflect.getMetadata('design:returntype', target, propertyKey)\r\n        });\r\n\r\n        const originalMethod = descriptor.value;\r\n        descriptor.value = function () {\r\n            const context = this;\r\n            const args = Array.prototype.slice.call(arguments);\r\n            const config: WorkerConfig = context.__worker_config__;\r\n            if (config) {\r\n                if (config.isClient) {\r\n                    const secret: SecretResult<WorkerEvents.Callable> = {\r\n                        clientSecret: context.__worker_config__.clientSecret,\r\n                        type: WorkerEvents.Callable,\r\n                        propertyName: propertyKey,\r\n                        body: {\r\n                            args: args\r\n                        }\r\n                    };\r\n                    return secret;\r\n                } else {\r\n                    return originalMethod.call(context, ...args);\r\n                }\r\n            } else {\r\n                return originalMethod.call(context, ...args);\r\n            }\r\n        };\r\n        return descriptor;\r\n    };\r\n}\r\n","import { WorkerUtils, ShallowTransferParamMetaData, WorkerAnnotations } from 'angular-web-worker/common';\r\n\r\n/**\r\n * Transfers the decorated argument's prototype when it is serialized and unserialized when the method is called from `WorkerClient.call()`. This will only have an effect if\r\n * the method is decorated with `@Callable()`\r\n * @Experimental has limitations\r\n */\r\nexport function ShallowTransfer() {\r\n    return function (target: Object, propertyKey: string | symbol, parameterIndex: number) {\r\n        const argTypes: any[] = Reflect.getMetadata('design:paramtypes', target, propertyKey);\r\n        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.ShallowTransferArgs, <ShallowTransferParamMetaData>{\r\n            name: propertyKey,\r\n            type: argTypes[parameterIndex],\r\n            argIndex: parameterIndex\r\n        });\r\n    };\r\n}\r\n","import { WorkerUtils, ObservablesOnly, SubscribableMetaData, WorkerAnnotations, WorkerConfig, SecretResult, WorkerEvents } from 'angular-web-worker/common';\r\nimport 'reflect-metadata';\r\n\r\n/**\r\n * Allows the decorated worker property to be subscribed to, or observed through the `WorkerClient.subscribe()` and `WorkerClient.observe()` methods.\r\n *\r\n * Can only be used on multicasted RxJS observables being a `Subject`,  `BehaviorSubject`, `ReplaySubject` or `AsyncSubject`.\r\n * @Serialized When data is transferred through `Subject.next()`, functions will not be copied and circular referencing structures will cause errors\r\n */\r\nexport function Subscribable() {\r\n    return function <T, Tkey extends keyof ObservablesOnly<T>>(target: T, propertyKey: Tkey) {\r\n        WorkerUtils.pushAnnotation(target.constructor, WorkerAnnotations.Observables, <SubscribableMetaData>{\r\n            name: propertyKey,\r\n            type: Reflect.getMetadata('design:type', target, <string>propertyKey)\r\n        });\r\n    };\r\n}\r\n","\r\nimport { WorkerController } from './worker-controller';\r\nimport { WebWorkerType, WorkerMessageBus } from 'angular-web-worker/common';\r\n\r\n/**\r\n * Bootstraps the worker class when a new worker script is created in the browser. The class must be decorated with `@AngularWebWorker()`\r\n * @param worker worker class to bootstrap\r\n */\r\nexport function bootstrapWorker<T>(worker: WebWorkerType<T>) {\r\n\r\n    const messageBus: WorkerMessageBus = {\r\n        onmessage: (ev: MessageEvent) => {\r\n        },\r\n        postMessage: (msg: Response) => {\r\n            (postMessage as Function)(msg);\r\n        }\r\n    };\r\n    const workerController = new WorkerController<T>(worker, messageBus);\r\n\r\n    onmessage = (ev: MessageEvent) => {\r\n        messageBus.onmessage(ev);\r\n    };\r\n}\r\n"]}