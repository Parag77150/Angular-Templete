(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define('angular-web-worker/common', ['exports'], factory) :
  (global = global || self, factory((global['angular-web-worker'] = global['angular-web-worker'] || {}, global['angular-web-worker'].common = {})));
}(this, function (exports) { 'use strict';

  /**
   * Worker annotation constants for decorators
   */

  (function (WorkerAnnotations) {
      WorkerAnnotations["Annotation"] = "__worker_annotations__";
      WorkerAnnotations["Config"] = "__worker_config__";
      WorkerAnnotations["Callables"] = "callables";
      WorkerAnnotations["Observables"] = "observables";
      WorkerAnnotations["Accessables"] = "accessables";
      WorkerAnnotations["ShallowTransferArgs"] = "shallowTransferArgs";
      WorkerAnnotations["IsWorker"] = "isWorker";
      WorkerAnnotations["Factory"] = "workerFactory";
  })(exports.WorkerAnnotations || (exports.WorkerAnnotations = {}));

  /**
   * A set of static utility functions for creating and retrieving worker annotations
   */
  var WorkerUtils = /** @class */ (function () {
      function WorkerUtils() {
      }
      /**
       * Creates or replaces a worker annotation
       * @param cls Class or object that the annotations will be attached to
       * @param propertyKey name of the annotated property
       * @param value the value of the annotation
       */
      WorkerUtils.setAnnotation = function (cls, propertyKey, value) {
          if (cls.hasOwnProperty(exports.WorkerAnnotations.Annotation)) {
              cls[exports.WorkerAnnotations.Annotation][propertyKey] = value;
          }
          else {
              Object.defineProperty(cls, exports.WorkerAnnotations.Annotation, {
                  value: {}
              });
              WorkerUtils.setAnnotation(cls, propertyKey, value);
          }
      };
      /**
       * Adds an item to an array for a particular annotation property. If no array exists a new array will be created before the item is added
       * @param cls Class or object that the annotations will be attached to
       * @param propertyKey name of the annotated array
       * @param value the item to add in the array
       */
      WorkerUtils.pushAnnotation = function (cls, propertyKey, value) {
          if (cls.hasOwnProperty(exports.WorkerAnnotations.Annotation)) {
              if (cls[exports.WorkerAnnotations.Annotation].hasOwnProperty(propertyKey)) {
                  cls[exports.WorkerAnnotations.Annotation][propertyKey].push(value);
              }
              else {
                  cls[exports.WorkerAnnotations.Annotation][propertyKey] = [];
                  cls[exports.WorkerAnnotations.Annotation][propertyKey].push(value);
              }
          }
          else {
              Object.defineProperty(cls, exports.WorkerAnnotations.Annotation, {
                  value: {}
              });
              WorkerUtils.pushAnnotation(cls, propertyKey, value);
          }
      };
      /**
       * Returns an annotated worker property. Allows for a generic type argument to specify the return type of the annotation
       * @param cls Class or object that the annotations is attached to
       * @param propertyKey name of the annotated array
       * @param ifUndefined the returned value if the annotated property does not exist
       */
      WorkerUtils.getAnnotation = function (cls, propertyKey, ifUndefined) {
          if (ifUndefined === void 0) { ifUndefined = null; }
          if (cls.hasOwnProperty(exports.WorkerAnnotations.Annotation)) {
              return cls[exports.WorkerAnnotations.Annotation][propertyKey];
          }
          else {
              return ifUndefined;
          }
      };
      return WorkerUtils;
  }());

  /**
   * Numeric enum of worker event types that are sent between a `WorkerClient` and a `WorkerController`
   */

  (function (WorkerEvents) {
      /**
       * Event type for calling worker methods decorated with `@Callable()`. Triggered in the `WorkerClient.call()` method
       */
      WorkerEvents[WorkerEvents["Callable"] = 1] = "Callable";
      /**
       * Event type for accessing worker properties decorated with `@Accessable()`. Triggered in the `WorkerClient.get()` and `WorkerClient.set()` methods
       */
      WorkerEvents[WorkerEvents["Accessable"] = 2] = "Accessable";
      /**
       * Event type for creating and/or removing subscriptions or observables from RxJS subjects within a worker that are decorated with `@Subscribable()`.
       * Triggered in the `WorkerClient.subscribe()`, `WorkerClient.observe()` and `WorkerClient.unsubscribe()`
       */
      WorkerEvents[WorkerEvents["Observable"] = 3] = "Observable";
      /**
       * Event type for observables that are triggered within the worker and delivered to a `WorkerClient` which occurs after a client has subscribed to, or observed a worker subject.
       * This differs from the other events types as it is one-way communication and therefore is not triggered by a request but rather observables in the worker
       */
      WorkerEvents[WorkerEvents["ObservableMessage"] = 4] = "ObservableMessage";
      /**
       * Event type when the worker script is created in the browser which triggers the `onWorkerInit` life-cycle hook if implemented
       */
      WorkerEvents[WorkerEvents["Init"] = 5] = "Init";
  })(exports.WorkerEvents || (exports.WorkerEvents = {}));
  /**
    * The event type when a `WorkerResponseEvent` response is sent to a client after being triggered by an obvservable in the worker
    */

  (function (WorkerObservableMessageTypes) {
      WorkerObservableMessageTypes[WorkerObservableMessageTypes["Next"] = 1] = "Next";
      WorkerObservableMessageTypes[WorkerObservableMessageTypes["Error"] = 2] = "Error";
      WorkerObservableMessageTypes[WorkerObservableMessageTypes["Complete"] = 3] = "Complete";
  })(exports.WorkerObservableMessageTypes || (exports.WorkerObservableMessageTypes = {}));

  exports.WorkerUtils = WorkerUtils;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=angular-web-worker-common.umd.js.map
