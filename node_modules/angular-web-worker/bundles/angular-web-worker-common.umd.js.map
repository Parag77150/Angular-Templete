{"version":3,"file":"angular-web-worker-common.umd.js","sources":["ng://angular-web-worker/common/lib/annotations.ts","ng://angular-web-worker/common/lib/worker-utils.ts","ng://angular-web-worker/common/lib/worker-events.ts"],"sourcesContent":["\r\n/**\r\n * Worker annotation constants for decorators\r\n */\r\nexport enum WorkerAnnotations {\r\n    Annotation = '__worker_annotations__',\r\n    Config = '__worker_config__',\r\n    Callables = 'callables',\r\n    Observables = 'observables',\r\n    Accessables = 'accessables',\r\n    ShallowTransferArgs = 'shallowTransferArgs',\r\n    IsWorker = 'isWorker',\r\n    Factory = 'workerFactory'\r\n}\r\n\r\n/**\r\n * Configuration options attached to a worker instance describing if the instance is a client or not\r\n */\r\nexport interface WorkerConfig {\r\n    /**\r\n     * Whether worker is client instance or not, determined by whether it is created from a `WorkerClient` or the `bootstrapWorker()` function\r\n     */\r\n    isClient: boolean;\r\n    /**\r\n     * A secret that is attached to the client instance of a worker which must be returned when a `WorkerClient` calls any methods/properties of the worker\r\n     */\r\n    clientSecret?: string;\r\n}\r\n\r\n/**\r\n * Metadata attached to a worker's prototype for any properties decorated with `@Accessable()`. Contains details that describes how a `WorkerClient` can access the property\r\n */\r\nexport interface AccessableMetaData {\r\n    /**\r\n     * Name of the decorated property\r\n     */\r\n    name: string;\r\n    /**\r\n     * Prototype of the decorated property's design type that is obtained using reflection\r\n     */\r\n    type: Function;\r\n    /**\r\n     * Determines whether the decorated worker property can be retrieved by a `WorkerClient`. Set as an optional parameter in the `@Accessable()` decorator\r\n     * @defaultvalue true\r\n     */\r\n    get: boolean;\r\n    /**\r\n     * Determines whether the decorated worker property can be set from a `WorkerClient`. Set as an optional parameter in the `@Accessable()` decorator\r\n     * @defaultvalue true\r\n     */\r\n    set: boolean;\r\n    /**\r\n     * Whether the decoratored property's prototype is transfered after it has been serialized and unserialized during communication between a worker and a client. Set as an optional parameter in the `@Accessable()` decorator\r\n     * @defaultvalue false\r\n     * @Experimental has limitations\r\n     */\r\n    shallowTransfer: boolean;\r\n}\r\n\r\n/**\r\n * Metadata attached to a worker's prototype for any methods decorated with `@Callable()`. Contains details that allows the method to be called from a `WorkerClient`\r\n */\r\nexport interface CallableMetaData {\r\n    /**\r\n     * Name of the decorated property\r\n     */\r\n    name: string;\r\n    /**\r\n     * Prototype of the decorated method's return type that is obtained using reflection\r\n     */\r\n    returnType: Function;\r\n    /**\r\n     * Whether the returned value's prototype is transfered after it has been serialized and unserialized when it is brought back to a client. Set as an optional parameter in the `@Callable()` decorator\r\n     * @defaultvalue false\r\n     * @Experimental has limitations (cannot be used with async functions)\r\n     */\r\n    shallowTransfer: boolean;\r\n}\r\n\r\n/**\r\n * Metadata attached to a worker's prototype for any RxJS Subject properties that are decorated with `@Subscribable()`. Allows a `WorkerClient` to\r\n *  subscribe to and/or create observables from the subject within the worker\r\n */\r\nexport interface SubscribableMetaData {\r\n    /**\r\n     * Name of the decorated property\r\n     */\r\n    name: string;\r\n    /**\r\n     * Prototype of the decorated property's design type\r\n     */\r\n    type: Function;\r\n}\r\n\r\n/**\r\n * Metadata attached to a worker's prototype for method arguments that are decorated with `@ShallowTransfer()`.\r\n * Contains details that allows the argument's prototype to be transfered after it has been serialized and unserialized when sent from a client to be passed as an argument of a worker function.\r\n * @Experimental has limitations\r\n */\r\nexport interface ShallowTransferParamMetaData {\r\n    /**\r\n     * Name of the decorated property\r\n     */\r\n    name: string;\r\n    /**\r\n     * Prototype of the decorated argument's design type\r\n     */\r\n    type: Function;\r\n    /**\r\n     * Index of the argument in the functions call signiture\r\n     */\r\n    argIndex: number;\r\n}\r\n\r\n\r\n","import { WorkerAnnotations, WorkerConfig } from './annotations';\r\n\r\n/**\r\n * A set of static utility functions for creating and retrieving worker annotations\r\n */\r\nexport class WorkerUtils {\r\n\r\n    /**\r\n     * Creates or replaces a worker annotation\r\n     * @param cls Class or object that the annotations will be attached to\r\n     * @param propertyKey name of the annotated property\r\n     * @param value the value of the annotation\r\n     */\r\n    static setAnnotation(cls: any, propertyKey: string, value: any): void {\r\n        if (cls.hasOwnProperty(WorkerAnnotations.Annotation)) {\r\n            cls[WorkerAnnotations.Annotation][propertyKey] = value;\r\n        } else {\r\n            Object.defineProperty(cls, WorkerAnnotations.Annotation, {\r\n                value: {}\r\n            });\r\n            WorkerUtils.setAnnotation(cls, propertyKey, value);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds an item to an array for a particular annotation property. If no array exists a new array will be created before the item is added\r\n     * @param cls Class or object that the annotations will be attached to\r\n     * @param propertyKey name of the annotated array\r\n     * @param value the item to add in the array\r\n     */\r\n    static pushAnnotation(cls: any, propertyKey: string, value: any): void {\r\n        if (cls.hasOwnProperty(WorkerAnnotations.Annotation)) {\r\n            if (cls[WorkerAnnotations.Annotation].hasOwnProperty(propertyKey)) {\r\n                cls[WorkerAnnotations.Annotation][propertyKey].push(value);\r\n            } else {\r\n                cls[WorkerAnnotations.Annotation][propertyKey] = [];\r\n                cls[WorkerAnnotations.Annotation][propertyKey].push(value);\r\n            }\r\n        } else {\r\n            Object.defineProperty(cls, WorkerAnnotations.Annotation, {\r\n                value: {}\r\n            });\r\n            WorkerUtils.pushAnnotation(cls, propertyKey, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an annotated worker property. Allows for a generic type argument to specify the return type of the annotation\r\n     * @param cls Class or object that the annotations is attached to\r\n     * @param propertyKey name of the annotated array\r\n     * @param ifUndefined the returned value if the annotated property does not exist\r\n     */\r\n    static getAnnotation<T>(cls: any, propertyKey: string, ifUndefined = null): T {\r\n        if (cls.hasOwnProperty(WorkerAnnotations.Annotation)) {\r\n            return cls[WorkerAnnotations.Annotation][propertyKey];\r\n        } else {\r\n            return ifUndefined;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","\r\n/**\r\n * Numeric enum of worker event types that are sent between a `WorkerClient` and a `WorkerController`\r\n */\r\nexport enum WorkerEvents {\r\n    /**\r\n     * Event type for calling worker methods decorated with `@Callable()`. Triggered in the `WorkerClient.call()` method\r\n     */\r\n    Callable = 1,\r\n    /**\r\n     * Event type for accessing worker properties decorated with `@Accessable()`. Triggered in the `WorkerClient.get()` and `WorkerClient.set()` methods\r\n     */\r\n    Accessable = 2,\r\n    /**\r\n     * Event type for creating and/or removing subscriptions or observables from RxJS subjects within a worker that are decorated with `@Subscribable()`.\r\n     * Triggered in the `WorkerClient.subscribe()`, `WorkerClient.observe()` and `WorkerClient.unsubscribe()`\r\n     */\r\n    Observable = 3,\r\n    /**\r\n     * Event type for observables that are triggered within the worker and delivered to a `WorkerClient` which occurs after a client has subscribed to, or observed a worker subject.\r\n     * This differs from the other events types as it is one-way communication and therefore is not triggered by a request but rather observables in the worker\r\n     */\r\n    ObservableMessage = 4,\r\n    /**\r\n     * Event type when the worker script is created in the browser which triggers the `onWorkerInit` life-cycle hook if implemented\r\n     */\r\n    Init = 5\r\n}\r\n\r\n/**\r\n * A typed event interface for genericly describing the data of the native `MessageEvent` which is sent with `Worker.postMessage`\r\n * @Serialized\r\n */\r\nexport interface WorkerEvent<T> extends MessageEvent {\r\n    data: T;\r\n}\r\n\r\n/**\r\n * Event that is sent from a `WorkerClient` to a `WorkerController` containing details to trigger work in the web worker\r\n * @Serialized\r\n */\r\nexport interface WorkerRequestEvent<EventType> {\r\n    /**\r\n     * The type worker request which also determines structure of the request's `body` property\r\n     * @see WorkerEvents\r\n     */\r\n    type: EventType;\r\n    /**\r\n     * Name of the worker property/method that triggered the request\r\n     */\r\n    propertyName: string;\r\n    /**\r\n     * Secret key that is generated by a `WorkerClient` for each request and returned back in the response by a `WorkerController`\r\n     * after the worker has completed the desired task. Allows the worker's response to mapped back to the request.\r\n     */\r\n    requestSecret: string;\r\n    /**\r\n     * Detail of the request that is specific to the request type. The structure is conditional on the request's generic `EventType`\r\n     * type argument as well as the request's `type` property\r\n     */\r\n    body: EventType extends WorkerEvents.Callable ? WorkerCallableBody : EventType extends WorkerEvents.Accessable ? WorkerAccessableBody\r\n    : EventType extends WorkerEvents.Observable ? WorkerSubscribableBody : null;\r\n}\r\n\r\n/**\r\n * The body of a `WorkerRequestEvent<EventType>` when the type is `WorkerEvents.Accessable`\r\n * @Serialized\r\n */\r\nexport interface WorkerAccessableBody {\r\n    /**\r\n     * Determines whether the request is intended to get or set the value of a worker's property\r\n     */\r\n    isGet: boolean;\r\n    /**\r\n     * When `isGet` is false, it is serializabe the value to which the worker's property will be set\r\n     */\r\n    value?: any;\r\n}\r\n\r\n/**\r\n * The body of a `WorkerRequestEvent<EventType>` when the type is `WorkerEvents.Callable`\r\n * @Serialized\r\n */\r\nexport interface WorkerCallableBody {\r\n    /**\r\n     * Array of function arguments to be applied to the when the worker's method is called\r\n     */\r\n    arguments: any[];\r\n}\r\n\r\n/**\r\n * The body of a `WorkerRequestEvent<EventType>` when the type is `WorkerEvents.Observable`.\r\n * @Serialized\r\n */\r\nexport interface WorkerSubscribableBody {\r\n    /**\r\n     * Whether the request is intended to unsubscribe or subscribe to an observable\r\n     */\r\n    isUnsubscribe: boolean;\r\n    /**\r\n     * A unique key generated by a `WorkerClient` allowing messages triggered by subscriptions in a `WorkerController` (subscribing to observables in the worker)\r\n     * to be mapped to trigger observable events in the client and any consequent subscriptions\r\n     */\r\n    subscriptionKey: string;\r\n}\r\n\r\n/**\r\n * Event that is sent from a `WorkerController` to a `WorkerClient` in response to a particular request from the client.\r\n * **NOTE:** Errors are also communicated through this response event as the native `Worker.onerror` does not bubble up to be\r\n * caught in the async functions of the `WorkerClient`.\r\n * @Serialized\r\n */\r\nexport interface WorkerResponseEvent<T> {\r\n    /**\r\n     * The type worker event. Unlike the `WorkerRequestEvent` this does not affect the structure of the response result\r\n     * @see WorkerEvents\r\n     */\r\n    type: number;\r\n    /**\r\n     * Name of the worker property/method that originally triggered the event\r\n     */\r\n    propertyName: string;\r\n    /**\r\n     * Secret key that is generated by a `WorkerClient` for each request and returned back in the response by a `WorkerController`\r\n     * after the worker has completed the desired task. Allows the worker's response to mapped back to the request.\r\n     */\r\n    requestSecret: string;\r\n    /**\r\n     * Whether the response arose from an error that was caught in the worker\r\n     */\r\n    isError: boolean;\r\n    /**\r\n     * The result of the response when not triggered from an error.\r\n     * @Serialized Functions will not be copied and circular references will cause errors\r\n     */\r\n    result: T;\r\n    /**\r\n     * The error message if the response was triggered by an error\r\n     */\r\n    error?: any;\r\n}\r\n\r\n/**\r\n * Describes the `WorkerResponseEvent.result` when any observables in the worker trigger messages that must be sent to a client. **Note:** this\r\n * differs from other event responses as it is one-way communication and therefore is not triggered by a request but rather observables in the worker.\r\n * @Serialized\r\n */\r\nexport interface WorkerObservableMessage {\r\n    /**\r\n     * The type of observable message sent to the client which aligns to RxJS observables being `next`, `onerror` and `complete`\r\n     * @see WorkerObservableMessageTypes\r\n     */\r\n    type: number;\r\n    /**\r\n     * A unique key recieved from the client when the client initially subscribed to the observable.\r\n     * Allows the message to be mapped to the trigger the correct event when recived by the client\r\n     */\r\n    key: string;\r\n    /**\r\n     * Value communicated by the observable when the event type is `WorkerObservableMessageTypes.Next`\r\n     * @Serialized Functions will not be copied and circular references will cause errors\r\n     */\r\n    value?: any;\r\n    /**\r\n     * Error communicated by the observable when the event type is `WorkerObservableMessageTypes.Error`\r\n     * @Serialized Functions will not be copied and circular references will cause errors\r\n     */\r\n    error?: any;\r\n}\r\n\r\n/**\r\n  * The event type when a `WorkerResponseEvent` response is sent to a client after being triggered by an obvservable in the worker\r\n  */\r\nexport enum WorkerObservableMessageTypes {\r\n    Next = 1,\r\n    Error = 2,\r\n    Complete = 3\r\n}\r\n\r\n\r\n/**\r\n  * A secret that is returned when a `WorkerClient` calls any methods or properties of the client instance of a worker. Allows the client to know if that method or worker has been decorated\r\n  * and also contains details that are neccessary to make a `postMessage` request to the `WorkerController`\r\n  */\r\nexport interface SecretResult<SecretType> {\r\n    /**\r\n     * The type of worker secret result which also determines structure of the secret's `body` property\r\n     * @see WorkerEvents\r\n     */\r\n    type: SecretType;\r\n    /**\r\n     * A secret key that generated by a  `WorkerClient` and is attached the client instance of a worker which needs to be returned when a decorated property or method is called by a `WorkerClient`\r\n     */\r\n    clientSecret: string;\r\n    /**\r\n     * The name of the property or method that has been called\r\n     */\r\n    propertyName: string;\r\n    /**\r\n     * Detail of the secret that is specific to the secret type. The structure is conditional on the secrets generic `SecretType` type argument as well as the secret's `type` property\r\n     * @see WorkerEvents\r\n     */\r\n    body: SecretType extends WorkerEvents.Callable ? SecretCallableBody : SecretType extends WorkerEvents.Accessable ? SecretAccessableBody : null;\r\n}\r\n\r\n/**\r\n * The body of a `SecretResult<SecretType>` when the type is `WorkerEvents.Callable`\r\n */\r\nexport interface SecretCallableBody {\r\n    /**\r\n     * The function arguments that where used to call the workers method, which are then sent in a `WorkerRequestEvent` to call the same method in the worker\r\n     */\r\n    args: any[];\r\n}\r\n\r\n/**\r\n * The body of a `SecretResult<SecretType>` when the type is `WorkerEvents.Acessable`\r\n */\r\nexport interface SecretAccessableBody {\r\n    /**\r\n     * Whether the client can perform a get operation on the decorated property. Set as an optional parameter in the `@Accessable()` decorator\r\n     * @defaultvalue true\r\n     */\r\n    get: boolean;\r\n    /**\r\n     * Whether the client can perform a set operation on the decorated property. Set as an optional parameter in the `@Accessable()` decorator\r\n     * @defaultvalue true\r\n     */\r\n    set: boolean;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["WorkerAnnotations","WorkerEvents","WorkerObservableMessageTypes"],"mappings":";;;;;;EACA;;;AAGA;EAAA,WAAY,iBAAiB;MACzB,0DAAqC,CAAA;MACrC,iDAA4B,CAAA;MAC5B,4CAAuB,CAAA;MACvB,gDAA2B,CAAA;MAC3B,gDAA2B,CAAA;MAC3B,gEAA2C,CAAA;MAC3C,0CAAqB,CAAA;MACrB,8CAAyB,CAAA;GAC5B,EATWA,yBAAiB,KAAjBA,yBAAiB,QAS5B;;ECXD;;;AAGA;MAAA;OAwDC;;;;;;;MAhDU,yBAAa,GAApB,UAAqB,GAAQ,EAAE,WAAmB,EAAE,KAAU;UAC1D,IAAI,GAAG,CAAC,cAAc,CAACA,yBAAiB,CAAC,UAAU,CAAC,EAAE;cAClD,GAAG,CAACA,yBAAiB,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC;WAC1D;eAAM;cACH,MAAM,CAAC,cAAc,CAAC,GAAG,EAAEA,yBAAiB,CAAC,UAAU,EAAE;kBACrD,KAAK,EAAE,EAAE;eACZ,CAAC,CAAC;cACH,WAAW,CAAC,aAAa,CAAC,GAAG,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;WACtD;OACJ;;;;;;;MASM,0BAAc,GAArB,UAAsB,GAAQ,EAAE,WAAmB,EAAE,KAAU;UAC3D,IAAI,GAAG,CAAC,cAAc,CAACA,yBAAiB,CAAC,UAAU,CAAC,EAAE;cAClD,IAAI,GAAG,CAACA,yBAAiB,CAAC,UAAU,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;kBAC/D,GAAG,CAACA,yBAAiB,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;eAC9D;mBAAM;kBACH,GAAG,CAACA,yBAAiB,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;kBACpD,GAAG,CAACA,yBAAiB,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;eAC9D;WACJ;eAAM;cACH,MAAM,CAAC,cAAc,CAAC,GAAG,EAAEA,yBAAiB,CAAC,UAAU,EAAE;kBACrD,KAAK,EAAE,EAAE;eACZ,CAAC,CAAC;cACH,WAAW,CAAC,cAAc,CAAC,GAAG,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;WACvD;OACJ;;;;;;;MAQM,yBAAa,GAApB,UAAwB,GAAQ,EAAE,WAAmB,EAAE,WAAkB;UAAlB,4BAAA,EAAA,kBAAkB;UACrE,IAAI,GAAG,CAAC,cAAc,CAACA,yBAAiB,CAAC,UAAU,CAAC,EAAE;cAClD,OAAO,GAAG,CAACA,yBAAiB,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,CAAC;WACzD;eAAM;cACH,OAAO,WAAW,CAAC;WACtB;OACJ;MAEL,kBAAC;GAAA;;EC5DD;;;AAGA;EAAA,WAAY,YAAY;;;;MAIpB,uDAAY,CAAA;;;;MAIZ,2DAAc,CAAA;;;;;MAKd,2DAAc,CAAA;;;;;MAKd,yEAAqB,CAAA;;;;MAIrB,+CAAQ,CAAA;GACX,EAvBWC,oBAAY,KAAZA,oBAAY,QAuBvB;;;;AAkJD;EAAA,WAAY,4BAA4B;MACpC,+EAAQ,CAAA;MACR,iFAAS,CAAA;MACT,uFAAY,CAAA;GACf,EAJWC,oCAA4B,KAA5BA,oCAA4B,QAIvC;;;;;;;;;;;;"}